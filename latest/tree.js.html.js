tui.util.defineNamespace("fedoc.content", {});
fedoc.content["tree.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\r\n * @fileoverview Render tree and update tree.\r\n * @author NHN Ent. FE dev team.&lt;dl_javascript@nhnent.com>\r\n */\r\n\r\nvar statics = require('./statics');\r\nvar util = require('./utils');\r\nvar TreeModel = require('./treemodel');\r\n\r\nvar STATE = statics.STATE;\r\n/**\r\n * Create tree model and inject data to model\r\n * @constructor \r\n * @param {string} id A id for tree root element\r\n *      @param {Object} data A data to be used on tree\r\n *      @param {Object} options The options\r\n *          @param {String} options.modelOption A inner option for model\r\n *          @param {object} [options.template] A markup set to make element\r\n *          @param {Array} [options.openSet] A class name and button label to open state\r\n *          @param {Array} [options.closeSet] A class name and button label to close state\r\n *          @param {string} [options.selectClass] A class name to selected node\r\n *          @param {string} [options.valueClass] A class name that for selected zone\r\n *          @param {string} [options.inputClass] A class name for input element\r\n *          @param {string} [options.subtreeClass] A class name for sub tree\r\n *          @param {Array} [options.depthLabels] A default label  each depth's nodes\r\n *          @param {object} [options.helperPos] A related position for helper object\r\n * @example\r\n * var data = [\r\n {title: 'rootA', children:\r\n         [\r\n             {title: 'root-1A'}, {title: 'root-1B'},{title: 'root-1C'}, {title: 'root-1D'},\r\n             {title: 'root-2A', children: [\r\n                 {title:'sub_1A', children:[{title:'sub_sub_1A'}]}, {title:'sub_2A'}\r\n             ]}, {title: 'root-2B'},{title: 'root-2C'}, {title: 'root-2D'},\r\n             {title: 'root-3A',\r\n                 children: [\r\n                     {title:'sub3_a'}, {title:'sub3_b'}\r\n                 ]\r\n             }, {title: 'root-3B'},{title: 'root-3C'}, {title: 'root-3D'}\r\n         ]\r\n },\r\n {title: 'rootB', children: [\r\n     {title:'B_sub1'}, {title:'B_sub2'}, {title:'b'}\r\n ]}\r\n ];\r\n\r\n var tree1 = new tui.component.Tree('id', data ,{\r\n        modelOption: {\r\n            defaultState: 'open'\r\n        }\r\n    });\r\n});\r\n **/\r\n\r\nvar Tree = tui.util.defineClass(/** @lends Tree.prototype */{\r\n\r\n    /**\r\n     * Initialize\r\n     * @param {String} id A id for root \r\n     * @param {Object} data A initialize data\r\n     * @param {Object} options The options \r\n     */\r\n    init: function (id, data, options) {\r\n\r\n        /**\r\n         * A default template\r\n         * @type {String}\r\n         */\r\n        this.template = options.template || statics.DEFAULT.TEMPLATE;\r\n\r\n        /**\r\n         * A root element\r\n         * @type {HTMLElement}\r\n         */\r\n        this.root = null;\r\n\r\n        /**\r\n         * A class name and lebel text for open state\r\n         * @type {Array}\r\n         */\r\n        this.openSet = options.openSet || statics.DEFAULT.OPEN;\r\n\r\n        /**\r\n         * A class name and label text for close state\r\n         * @type {Array}\r\n         */\r\n        this.closeSet = options.closeSet || statics.DEFAULT.CLOSE;\r\n\r\n        /**\r\n         * A class name for selected node \r\n         * @type {String}\r\n         */\r\n        this.onselectClass = options.selectClass || statics.DEFAULT.SELECT_CLASS;\r\n\r\n        /**\r\n         * A class name for double click area\r\n         * @type {string}\r\n         */\r\n        this.valueClass = options.valueClass || statics.DEFAULT.VALUE_CLASS;\r\n\r\n        /**\r\n         * A class name for input element\r\n         * @type {string}\r\n         */\r\n        this.editClass = options.inputClass || statics.DEFAULT.EDITABLE_CLASS;\r\n\r\n        /**\r\n         * A label for each depth\r\n         * @type {Array}\r\n         */\r\n        this.depthLabels = options.depthLabels || [];\r\n\r\n        /**\r\n         * A state of tree\r\n         * @type {number}\r\n         */\r\n        this.state = statics.STATE.NORMAL;\r\n\r\n        /**\r\n         * A class name for subtree\r\n         * @type {string|*}\r\n         */\r\n        this.subtreeClass = options.subtreeClass || statics.DEFAULT.SUBTREE_CLASS;\r\n\r\n        /**\r\n         * Whether drag and drop use or not\r\n         * @type {boolean|*}\r\n         */\r\n        this.useDrag = options.useDrag || statics.DEFAULT.USE_DRAG;\r\n\r\n        /**\r\n         * Whether helper element use or not\r\n         * @type {boolean|*}\r\n         */\r\n        this.useHelper = this.useDrag &amp;&amp; (options.useHelper || statics.DEFAULT.USE_HELPER);\r\n\r\n        /**\r\n         * Set relative position for helper object\r\n         * @type {object}\r\n         */\r\n        this.helperPos = options.helperPos || statics.DEFAULT.HELPER_POS;\r\n\r\n        /**\r\n         * Input element \r\n         * @type {HTMLElement}\r\n         */\r\n        this.inputElement = this.getEditableElement();\r\n\r\n        /**\r\n         * Make tree model\r\n         * @type {TreeModel}\r\n         */\r\n        this.model = new TreeModel(options.modelOption, this);\r\n\r\n        this.model.setData(data);\r\n\r\n        if (id) {\r\n            this.root = document.getElementById(id);\r\n        } else {\r\n            this.root = document.createElement('ul');\r\n            document.body.appendChild(this.root);\r\n        }\r\n\r\n        this._draw(this._getHtml(this.model.treeHash.root.childKeys));\r\n        this.setEvents();\r\n\r\n    },\r\n\r\n    /**\r\n     * Make input element\r\n     * @return {HTMLElement}\r\n     */\r\n    getEditableElement: function() {\r\n        var input = document.createElement('input');\r\n        input.className = this.editClass;\r\n        input.setAttribute('type', 'text');\r\n\r\n        return input;\r\n    },\r\n\r\n    /**\r\n     * Set event handler \r\n     */\r\n    setEvents: function() {\r\n\r\n        util.addEventListener(this.root, 'click', tui.util.bind(this._onClick, this));\r\n        util.addEventListener(this.inputElement, 'blur', tui.util.bind(this._onBlurInput, this));\r\n        util.addEventListener(this.inputElement, 'keyup', tui.util.bind(this._onKeyup, this));\r\n\r\n        if (this.useDrag) {\r\n            this._addDragEvent();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Set drag and drop event \r\n     * @private\r\n     */\r\n    _addDragEvent: function() {\r\n        var userSelectProperty = util.testProp(['userSelect', 'WebkitUserSelect', 'OUserSelect', 'MozUserSelect', 'msUserSelect']);\r\n        var isSupportSelectStart = 'onselectstart' in document;\r\n        if (isSupportSelectStart) {\r\n            util.addEventListener(this.root, 'selectstart', util.preventDefault);\r\n        } else {\r\n            var style = document.documentElement.style;\r\n            style[userSelectProperty] = 'none';\r\n        }\r\n        util.addEventListener(this.root, 'mousedown', tui.util.bind(this._onMouseDown, this));\r\n    },\r\n\r\n    /**\r\n     * On key up event handler\r\n     * @private\r\n     */\r\n    _onKeyup: function(e) {\r\n        if (e.keyCode === 13) {\r\n            var target = util.getTarget(e);\r\n            this.model.rename(this.current.id, target.value);\r\n            this.changeState(this.current);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * On input blur event handler\r\n     * @param {event} e\r\n     * @private\r\n     */\r\n    _onBlurInput: function(e) {\r\n        if (this.state === STATE.NORMAL) {\r\n            return;\r\n        }\r\n        var target = util.getTarget(e);\r\n        this.model.rename(this.current.id, target.value);\r\n        this.changeState(this.current);\r\n    },\r\n\r\n    /**\r\n     * On click event handler\r\n     * @param {event} e\r\n     * @private\r\n     */\r\n    _onClick: function(e) {\r\n        var target = util.getTarget(e);\r\n\r\n        if (util.isRightButton(e)) {\r\n            this.clickTimer = null;\r\n            return;\r\n        }\r\n\r\n        if (!util.hasClass(target, this.valueClass)) {\r\n            this._onSingleClick(e);\r\n            return;\r\n        }\r\n\r\n        if (this.clickTimer) {\r\n            this._onDoubleClick(e);\r\n            window.clearTimeout(this.clickTimer);\r\n            this.clickTimer = null;\r\n        } else {\r\n            this.clickTimer = setTimeout(tui.util.bind(function() {\r\n                this._onSingleClick(e);\r\n            }, this), 400);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * handle single click event \r\n     * @param {event} e\r\n     * @private\r\n     */\r\n    _onSingleClick: function(e) {\r\n\r\n        this.clickTimer = null;\r\n\r\n        var target = util.getTarget(e),\r\n            tag = target.tagName.toUpperCase(),\r\n            parent = target.parentNode,\r\n            valueEl = util.getElementsByClass(parent, this.valueClass)[0];\r\n\r\n        if (tag === 'INPUT') {\r\n            return;\r\n        }\r\n\r\n        if (tag === 'BUTTON') {\r\n            this.model.changeState(valueEl.id);\r\n        } else {\r\n            this.model.setBuffer(valueEl.id);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Change state (STATE.NORMAL | STATE.EDITABLE)\r\n     * @param {HTMLelement} target 엘리먼트\r\n     */\r\n    changeState: function(target) {\r\n\r\n        if (this.state === STATE.EDITABLE) {\r\n            this.state = STATE.NORMAL;\r\n            this.action('restore', target);\r\n        } else {\r\n            this.state = STATE.EDITABLE;\r\n            this.action('convert', target);\r\n        }\r\n\r\n    },\r\n\r\n    /**\r\n     * handle Double click \r\n     * @param {event} e\r\n     * @private\r\n     */\r\n    _onDoubleClick: function(e) {\r\n        var target = util.getTarget(e);\r\n        this.changeState(target);\r\n    },\r\n\r\n    /**\r\n     * handle mouse down\r\n     * @private\r\n     */\r\n    _onMouseDown: function(e) {\r\n\r\n        if (this.state === STATE.EDITABLE || util.isRightButton(e)) {\r\n            return;\r\n        }\r\n\r\n        util.preventDefault(e);\r\n\r\n        var target = util.getTarget(e),\r\n            tag = target.tagName.toUpperCase();\r\n\r\n        if (tag === 'BUTTON' || tag === 'INPUT' || !util.hasClass(target, this.valueClass)) {\r\n            return;\r\n        }\r\n\r\n        this.pos = this.root.getBoundingClientRect();\r\n\r\n        if (this.useHelper) {\r\n            this.enableHelper({\r\n                x: e.clientX - this.pos.left,\r\n                y: e.clientY - this.pos.top\r\n            }, target.innerText || target.textContent);\r\n        }\r\n\r\n        this.move = tui.util.bind(this._onMouseMove, this);\r\n        this.up = tui.util.bind(this._onMouseUp, this, target);\r\n\r\n        util.addEventListener(document, 'mousemove', this.move);\r\n        util.addEventListener(document, 'mouseup', this.up);\r\n    },\r\n\r\n    /**\r\n     * Handle mouse move \r\n     * @param {event} me\r\n     * @private\r\n     */\r\n    _onMouseMove: function(me) {\r\n        if (!this.useHelper) {\r\n            return;\r\n        }\r\n        this.setHelperLocation({\r\n            x: me.clientX - this.pos.left,\r\n            y: me.clientY - this.pos.top\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Handle mouse up\r\n     * @param {HTMLElement} target A target \r\n     * @param {event} ue\r\n     * @private\r\n     */\r\n    _onMouseUp: function(target, ue) {\r\n        this.disableHelper();\r\n\r\n        var toEl = util.getTarget(ue),\r\n            model = this.model,\r\n            node = model.find(target.id),\r\n            toNode = model.find(toEl.id),\r\n            isDisable = model.isDisable(toNode, node);\r\n\r\n        if (model.find(toEl.id) &amp;&amp; toEl.id !== target.id &amp;&amp; !isDisable) {\r\n            model.move(target.id, node, toEl.id);\r\n        }\r\n\r\n        util.removeEventListener(document, 'mousemove', this.move);\r\n        util.removeEventListener(document, 'mouseup', this.up);\r\n    },\r\n\r\n    /**\r\n     * Show up guide element\r\n     * @param {object} pos A element position\r\n     * @param {string} value A element text value\r\n     */\r\n    enableHelper: function(pos, value) {\r\n        if (!this.helperElement) {\r\n            this.helperElement = document.createElement('span');\r\n            this.helperElement.style.position = 'absolute';\r\n            this.helperElement.style.display = 'none';\r\n            this.root.parentNode.appendChild(this.helperElement);\r\n        }\r\n\r\n        this.helperElement.innerHTML = value;\r\n    },\r\n\r\n    /**\r\n     * Set guide elmeent location\r\n     * @param {object} pos A position to move\r\n     */\r\n    setHelperLocation: function(pos) {\r\n\r\n        this.helperElement.style.left = pos.x + this.helperPos.x + 'px';\r\n        this.helperElement.style.top = pos.y + this.helperPos.y + 'px';\r\n        this.helperElement.style.display = 'block';\r\n\r\n    },\r\n\r\n    /**\r\n     * Hide guide element\r\n     */\r\n    disableHelper: function() {\r\n        if (this.helperElement) {\r\n            this.helperElement.style.display = 'none';\r\n        }\r\n    },\r\n\r\n    /**\r\n     * make html \r\n     * @param {Object} data A draw data\r\n     * @param {Path} beforePath A path of subtree\r\n     * @return {String} html\r\n     * @private\r\n     */\r\n    _getHtml: function(keys) {\r\n        var model = this.model,\r\n            html,\r\n            childEl = [],\r\n            node,\r\n            tmpl,\r\n            depth,\r\n            state,\r\n            label,\r\n            rate,\r\n            map;\r\n\r\n        tui.util.forEach(keys, function(el) {\r\n            node = model.find(el);\r\n            depth = node.depth;\r\n            state = this[node.state + 'Set'][0];\r\n            label = this[node.state + 'Set'][1];\r\n            rate = this.depthLabels[depth - 1] || '';\r\n            map = {\r\n                State: state,\r\n                StateLabel: label,\r\n                NodeID: node.id,\r\n                Depth: depth,\r\n                Title: node.value,\r\n                ValueClass: this.valueClass,\r\n                SubTree: this.subtreeClass,\r\n                Display: (node.state === 'open') ? '' : 'none',\r\n                DepthLabel: rate\r\n            };\r\n\r\n            if (tui.util.isNotEmpty(node.childKeys)) {\r\n                tmpl = this.template.EDGE_NODE;\r\n                map.Children = this._getHtml(node.childKeys);\r\n            } else {\r\n                tmpl = this.template.LEAP_NODE;\r\n            }\r\n\r\n            el = tmpl.replace(/\\{\\{([^\\}]+)\\}\\}/g, function(matchedString, name) {\r\n                return map[name] || '';\r\n            });\r\n\r\n            childEl.push(el);\r\n        }, this);\r\n\r\n        html = childEl.join('');\r\n\r\n        return html;\r\n    },\r\n\r\n    /**\r\n     * Update view.\r\n     * @param {string} act\r\n     * @param {object} target\r\n     */\r\n    notify: function(act, target) {\r\n        this.action(act, target);\r\n    },\r\n\r\n    /**\r\n     * Action \r\n     * @param {String} type A type of action \r\n     * @param {Object} target A target\r\n     */\r\n    action: function(type, target) {\r\n        this._actionMap = this._actionMap || {\r\n            refresh: this._refresh,\r\n            rename: this._rename,\r\n            toggle: this._toggleNode,\r\n            select: this._select,\r\n            unselect: this._unSelect,\r\n            convert: this._convert,\r\n            restore: this._restore\r\n        };\r\n        this._actionMap[type || 'refresh'].call(this, target);\r\n    },\r\n\r\n    /**\r\n     * Change node state\r\n     * @param {Object} node A informtion to node\r\n     * @private\r\n     */\r\n    _changeNodeState: function(node) {\r\n        var element = document.getElementById(node.id);\r\n        if (!element) {\r\n            return;\r\n        }\r\n\r\n        var parent = element.parentNode,\r\n            cls = parent.className;\r\n\r\n        if (tui.util.isEmpty(node.childKeys)) {\r\n            cls = 'leap_node ' + this[node.state + 'Set'][0];\r\n        } else {\r\n            cls = 'edge_node ' + this[node.state + 'Set'][0];\r\n        }\r\n\r\n        parent.className = cls;\r\n    },\r\n\r\n    /**\r\n     * Change state to edit \r\n     * @param {HTMLElement} element A target element\r\n     * @private\r\n     */\r\n    _convert: function(element) {\r\n        var id = element.id,\r\n            node = this.model.find(id),\r\n            label = node.value,\r\n            parent = element.parentNode;\r\n\r\n        if (this.current) {\r\n            this.current.style.display = '';\r\n        }\r\n\r\n        element.style.display = 'none';\r\n        this.inputElement.value = label;\r\n        this.current = element;\r\n        parent.insertBefore(this.inputElement, element);\r\n\r\n        this.inputElement.focus();\r\n    },\r\n\r\n    /**\r\n     * Apply node name\r\n     * @param {HTMLElement} element A target element\r\n     * @private\r\n     */\r\n    _restore: function(element) {\r\n\r\n        var parent = element.parentNode;\r\n\r\n        if (this.current) {\r\n            this.current.style.display = '';\r\n        }\r\n\r\n        this.inputElement.value = '';\r\n\r\n        parent.removeChild(this.inputElement);\r\n    },\r\n\r\n    /**\r\n     * Draw element\r\n     * @param {String} html A html made by data\r\n     * @param {Object} parent A parent element\r\n     * @private\r\n     *\r\n     */\r\n    _draw: function(html, parent) {\r\n        var root = parent || this.root;\r\n        root.innerHTML = html;\r\n    },\r\n\r\n    /**\r\n     * Set label by depth\r\n     * @api\r\n     * @param {Array} depthLabels A depth label array\r\n     */\r\n    setDepthLabels: function(depthLabels) {\r\n        this.depthLabels = depthLabels;\r\n    },\r\n\r\n    /**\r\n     * Refresh node\r\n     * @private\r\n     **/\r\n    _refresh: function() {\r\n        var data = this.model.treeHash.root.childKeys;\r\n        this._draw(this._getHtml(data));\r\n    },\r\n\r\n    /**\r\n     * Rename node\r\n     * @param {object} node A model information \r\n     * @private\r\n     */\r\n    _rename: function(node) {\r\n        var element = document.getElementById(node.id);\r\n        element.innerHTML = node.value;\r\n    },\r\n\r\n    /**\r\n    * Toggle model\r\n    * @param {Object} node A node information\r\n    * @private\r\n    **/\r\n    _toggleNode: function(node) {\r\n\r\n        var element = document.getElementById(node.id),\r\n            parent = element.parentNode,\r\n            childWrap = parent.getElementsByTagName('ul')[0],\r\n            button = parent.getElementsByTagName('button')[0],\r\n            state = this[node.state + 'Set'][0],\r\n            label = this[node.state + 'Set'][1],\r\n            isOpen = node.state === 'open';\r\n\r\n        parent.className = parent.className.replace(this.openSet[0], '').replace(this.closeSet[0], '') + state;\r\n        childWrap.style.display = isOpen ? '' : 'none';\r\n        button.innerHTML = label;\r\n    },\r\n\r\n    /**\r\n     * Select node\r\n     * @param {Object} node A target node\r\n     * @private\r\n     */\r\n    _select: function(node) {\r\n        var valueEl = document.getElementById(node.id);\r\n\r\n        if (tui.util.isExisty(valueEl)) {\r\n            valueEl.className = valueEl.className.replace(' ' + this.onselectClass, '') + ' ' + this.onselectClass;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Unselect node\r\n     * @param {Object} node A target node\r\n     * @private\r\n     **/\r\n    _unSelect: function(node) {\r\n        var valueEl = document.getElementById(node.id);\r\n\r\n        if (tui.util.isExisty(valueEl) &amp;&amp; util.hasClass(valueEl, this.onselectClass)) {\r\n            valueEl.className = valueEl.className.replace(' ' + this.onselectClass, '');\r\n        }\r\n    }\r\n});\r\n\r\nmodule.exports = Tree;\r\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"