tui.util.defineNamespace("fedoc.content", {});
fedoc.content["features_ajax.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>'use strict';\n\nvar snippet = tui.util;\nvar API_LIST = [];\nvar LOADER_CLASSNAME = 'tui-tree-loader';\n\n/**\n * Set Ajax feature on tree\n * @class Ajax\n * @constructor\n * @param {Tree} tree - Tree\n * @param {Object} options - Options\n *  @param {Object} options.command - Each Ajax request command options\n *  @param {Function} [options.parseData] - Function to parse and return the response data\n *  @param {string} [options.loaderClassName] - Classname of loader element\n *  @param {boolean} [options.isLoadRoot] - Whether load data from root node or not\n */\nvar Ajax = tui.util.defineClass(/** @lends Ajax.prototype */{/*eslint-disable*/\n    static: {\n        /**\n         * @static\n         * @memberOf Ajax\n         * @returns {Array.&lt;string>} API list of Ajax\n         */\n        getAPIList: function() {\n            return API_LIST.slice();\n        }\n    },\n    init: function(tree, options) { /*eslint-enable*/\n        options = tui.util.extend({}, options);\n\n        /**\n         * Tree\n         * @type {Tree}\n         */\n        this.tree = tree;\n\n        /**\n         * Option for each request command\n         * @type {Object}\n         */\n        this.command = options.command;\n\n        /**\n         * Callback for parsing the response data\n         * @type {?Function}\n         */\n        this.parseData = options.parseData || null;\n\n        /**\n         * Classname of loader element\n         * @type {string}\n         */\n        this.loaderClassName = options.loaderClassName || LOADER_CLASSNAME;\n\n        /**\n         * State of loading root data or not\n         * @type {boolean}\n         */\n        this.isLoadRoot = !snippet.isUndefined(options.isLoadRoot) ?\n                            options.isLoadRoot : true;\n\n        /**\n         * Loader element\n         * @type {HTMLElement}\n         */\n        this.loader = null;\n\n        this._createLoader();\n\n        tree.on('initFeature', snippet.bind(this._onInitFeature, this));\n    },\n\n    /**\n    * Custom event handler \"initFeature\"\n     * @private\n     */\n    _onInitFeature: function() {\n        if (!this.isLoadRoot) {\n            return;\n        }\n\n        this.tree.resetAllData();\n    },\n\n    /**\n     * Disable this module\n     */\n    destroy: function() {\n        var tree = this.tree;\n\n        this._removeLoader();\n\n        tree.off(this);\n    },\n\n    /**\n     * Load data to request server\n     * @param {string} type - Command type\n     * @param {Function} callback - Executed function after response\n     * @param {Object} [params] - Values to make \"data\" property using request\n     */\n    loadData: function(type, callback, params) {\n        var self = this;\n        var options;\n\n        if (!this.command || !this.command[type] ||\n            !this.command[type].url) {\n            return;\n        }\n\n        options = this._getDefaultRequestOptions(type, params);\n\n        /**\n         * @api\n         * @event Tree#beforeAjaxRequest\n         * @param {string} command - Command type\n         * @param {string} [data] - Request data\n         * @example\n         * tree.on('beforeAjaxRequest', function(command, data) {\n         *     console.log('before ' + command + ' request!');\n         *     return false; // It cancels request\n         *     // return true; // It fires request\n         * });\n         */\n        if (!this.tree.invoke('beforeAjaxRequest', type, params)) {\n            return;\n        }\n\n        this._showLoader();\n\n        options.success = function(response) {\n            self._responseSuccess(type, callback, response);\n        };\n\n        options.error = function() {\n            self._responseError(type);\n        };\n\n        $.ajax(options);\n    },\n\n    /**\n     * Processing when response is success\n     * @param {string} type - Command type\n     * @param {Function} callback - Executed function after response\n     * @param {Object|boolean} [response] - Response data from server or return value of \"parseData\"\n     * @private\n     */\n    _responseSuccess: function(type, callback, response) {\n        var tree = this.tree;\n        var data;\n\n        this._hideLoader();\n\n        if (this.parseData) {\n            response = this.parseData(type, response);\n        }\n\n        if (response) {\n            data = callback(response);\n\n            /**\n             * @api\n             * @event Tree#successAjaxResponse\n             * @param {string} command - Command type\n             * @param {string} [data] - Return value of executed command callback\n             * @example\n             * tree.on('successAjaxResponse', function(command, data) {\n             *     console.log(command + ' response is success!');\n             *     if (data) {\n             *           console.log('new add ids :' + data);\n             *     }\n             * });\n             */\n            tree.fire('successAjaxResponse', type, data);\n        } else {\n            /**\n             * @api\n             * @event Tree#failAjaxResponse\n             * @param {string} command - Command type\n             * @example\n             * tree.on('failAjaxResponse', function(command) {\n             *     console.log(command + ' response is fail!');\n             * });\n             */\n            tree.fire('failAjaxResponse', type);\n        }\n    },\n\n    /**\n     * Processing when response is error\n     * @param {string} type - Command type\n     * @private\n     */\n    _responseError: function(type) {\n        this._hideLoader();\n\n        /**\n         * @api\n         * @event Tree#errorAjaxResponse\n         * @param {string} command - Command type\n         * @example\n         * tree.on('errorAjaxResponse', function(command) {\n         *     console.log(command + ' response is error!');\n         * });\n         */\n        this.tree.fire('errorAjaxResponse', type);\n    },\n\n    /**\n     * Get default request options\n     * @param {string} type - Command type\n     * @param {Object} [params] - Value of request option \"data\"\n     * @returns {Object} Default options to request\n     * @private\n     */\n    _getDefaultRequestOptions: function(type, params) {\n        var options = this.command[type];\n\n        if (snippet.isFunction(options.url)) { // for restful API url\n            options.url = options.url(params);\n        }\n\n        if (snippet.isFunction(options.data)) { // for custom request data\n            options.data = options.data(params);\n        }\n\n        options.type = (options.type) ? options.type.toLowerCase() : 'get';\n        options.dataType = options.dataType || 'json';\n\n        return options;\n    },\n\n    /**\n     * Create loader element\n     * @private\n     */\n    _createLoader: function() {\n        var tree = this.tree;\n        var loader = document.createElement('span');\n\n        loader.className = this.loaderClassName;\n        loader.style.display = 'none';\n\n        tree.rootElement.parentNode.appendChild(loader);\n\n        this.loader = loader;\n    },\n\n    /**\n     * Remove loader element\n     * @private\n     */\n    _removeLoader: function() {\n        var tree = this.tree;\n        var loader = this.loader;\n\n        tree.rootElement.parentNode.removeChild(loader);\n\n        this.loader = null;\n    },\n\n    /**\n     * Show loader element on tree\n     * @private\n     */\n    _showLoader: function() {\n        this.loader.style.display = 'block';\n    },\n\n    /**\n     * Hide loader element on tree\n     * @private\n     */\n    _hideLoader: function() {\n        this.loader.style.display = 'none';\n    }\n});\n\nmodule.exports = Ajax;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"