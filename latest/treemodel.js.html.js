tui.util.defineNamespace("fedoc.content", {});
fedoc.content["treemodel.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\r\n * @fileoverview Update view and control tree data\r\n * @author NHN Ent. FE dev team.&lt;dl_javascript@nhnent.com>\r\n */\r\n\r\n/**\r\n * @constructor TreeModel\r\n * **/\r\nvar TreeModel = tui.util.defineClass(/** @lends TreeModel.prototype */{\r\n    init: function(options, tree) {\r\n\r\n        /**\r\n         * A count for node identity number\r\n         * @type {number}\r\n         */\r\n        this.count = 0;\r\n\r\n        /**\r\n         * A view that observe model change\r\n         * @type {tui.component.Tree}\r\n         */\r\n        this.tree = tree;\r\n\r\n        /**\r\n         * Default state of node\r\n         * @type {String}\r\n         */\r\n        this.nodeDefaultState = options.defaultState || 'close';\r\n\r\n        /**\r\n         * A buffer \r\n         * @type {null}\r\n         */\r\n        this.buffer = null;\r\n\r\n        /**\r\n         * A depth\r\n         * @type {number}\r\n         */\r\n        this.depth = 0;\r\n\r\n        /**\r\n         * A milisecon time to make node ID\r\n         * @type {number}\r\n         */\r\n        this.date = new Date().getTime();\r\n\r\n        /**\r\n         * Tree hash\r\n         * @type {object}\r\n         */\r\n        this.treeHash = {};\r\n\r\n        this.treeHash['root'] = this.makeNode(0, 'root', 'root');\r\n        this.connect(tree);\r\n    },\r\n\r\n    /**\r\n     * Set model with tree data\r\n     * @param {array} data  A tree data\r\n     */\r\n    setData: function(data) {\r\n        this.treeHash.root.childKeys = this._makeTreeHash(data);\r\n    },\r\n\r\n    /**\r\n     * Change hierarchy data to hash list.\r\n     * @param {array} data A tree data \r\n     * @param {string} parentId A parent node id\r\n     * @private\r\n     */\r\n    _makeTreeHash: function(data, parentId) {\r\n\r\n        var childKeys = [],\r\n            id;\r\n\r\n        this.depth = this.depth + 1;\r\n\r\n        tui.util.forEach(data, function(element) {\r\n            id = this._getId();\r\n            this.treeHash[id] = this.makeNode(this.depth, id, element.value, parentId);\r\n            if (element.children &amp;&amp; tui.util.isNotEmpty(element.children)) {\r\n                this.treeHash[id].childKeys = this._makeTreeHash(element.children, id);\r\n            }\r\n            childKeys.push(id);\r\n        }, this);\r\n\r\n        this.depth = this.depth - 1;\r\n        childKeys.sort(tui.util.bind(this.sort, this));\r\n        return childKeys;\r\n    },\r\n\r\n    /**\r\n     * Create node\r\n     * @param {number} depth A depth of node\r\n     * @param {string} id A node ID\r\n     * @param {string} value A value of node\r\n     * @param {string} parentId A parent node ID\r\n     * @return {{value: *, parentId: (*|string), id: *}}\r\n     */\r\n    makeNode: function(depth, id, value, parentId) {\r\n        return {\r\n            depth: depth,\r\n            value: value,\r\n            parentId: (depth === 0) ? null : (parentId || 'root'),\r\n            state: this.nodeDefaultState,\r\n            id: id\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Make and return node ID\r\n     * @private\r\n     * @return {String}\r\n     */\r\n    _getId: function() {\r\n        this.count = this.count + 1;\r\n        return 'node_' + this.date + '_' + this.count;\r\n    },\r\n\r\n    /**\r\n     * Find node \r\n     * @param {string} key A key to find node\r\n     * @return {object|undefined}\r\n     */\r\n    find: function(key) {\r\n        return this.treeHash[key];\r\n    },\r\n\r\n    /**\r\n     * Remove node and child nodes\r\n     * @param {string} key A key to remove\r\n     */\r\n    remove: function(key) {\r\n        /**\r\n         * @api\r\n         * @event TreeModel#remove\r\n         * @param {{id: string}} removed - id\r\n         * @example\r\n         * tree.model.on('remove', function(data) {\r\n         *     alert('removed -' +  data.id );\r\n         * });\r\n         */\r\n        var res = this.invoke('remove', { id: key });\r\n\r\n        if (!res) {\r\n            return;\r\n        }\r\n\r\n        this.removeKey(key);\r\n        this.treeHash[key] = null;\r\n\r\n        this.notify();\r\n    },\r\n\r\n    /**\r\n     * Remove node key\r\n     * @param {string} key A key to remove\r\n     */\r\n    removeKey: function(key) {\r\n        var node = this.find(key);\r\n\r\n        if (!node) {\r\n            return;\r\n        }\r\n\r\n        var parent = this.find(node.parentId);\r\n\r\n        parent.childKeys = tui.util.filter(parent.childKeys, function(childKey) {\r\n            return childKey !== key;\r\n        });\r\n\r\n    },\r\n\r\n    /**\r\n     * Move node\r\n     * @param {string} key A key to move node\r\n     * @param {object} node A node object to move\r\n     * @param {string} targetId A target ID to insert\r\n     */\r\n    move: function(key, node, targetId) {\r\n\r\n        this.removeKey(key);\r\n        this.treeHash[key] = null;\r\n        this.insert(node, targetId);\r\n\r\n    },\r\n\r\n    /**\r\n     * Insert node\r\n     * @param {object} node A node object to insert\r\n     * @param {string} [targetId] A target ID to insert\r\n     */\r\n    insert: function(node, targetId) {\r\n        var target = this.find(targetId || 'root');\r\n\r\n        if (!target.childKeys) {\r\n            target.childKeys = [];\r\n        }\r\n\r\n        target.childKeys.push(node.id);\r\n        node.depth = target.depth + 1;\r\n        node.parentId = targetId;\r\n        target.childKeys.sort(tui.util.bind(this.sort, this));\r\n\r\n        this.treeHash[node.id] = node;\r\n\r\n        this.notify();\r\n    },\r\n\r\n    /**\r\n     * A notify tree\r\n     */\r\n    notify: function(type, target) {\r\n        if (this.tree) {\r\n            this.tree.notify(type, target);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Connect view and model\r\n     * @param {Tree} tree\r\n     */\r\n    connect: function(tree) {\r\n        if (!tree) {\r\n            return;\r\n        }\r\n        this.tree = tree;\r\n    },\r\n\r\n    /**\r\n     * Rename node\r\n     * @param {stirng} key A key to rename\r\n     * @param {string} value A value to change\r\n     */\r\n    rename: function(key, value) {\r\n\r\n        /**\r\n         * @api\r\n         * @event TreeModel#rename\r\n         * @param {{id: string, value: string}} eventData\r\n         * @example\r\n         * // 노드 이름 변경시 발생\r\n         * tree.model.on('rename', function(object) {\r\n         *     document.getElementById('selectValue').value = object.value + '노드 이름 변경';\r\n         *     return true;\r\n         * });\r\n         */\r\n        var res = this.invoke('rename', {id: key, value: value});\r\n        if (!res) {\r\n            return;\r\n        }\r\n\r\n        var node = this.find(key);\r\n        node.value = value;\r\n\r\n        this.notify('rename', node);\r\n    },\r\n\r\n    /**\r\n     * Change node state\r\n     * @param {string} key The key value to change\r\n     */\r\n    changeState: function(key) {\r\n        var node = this.find(key);\r\n        node.state = (node.state === 'open') ? 'close' : 'open';\r\n        this.notify('toggle', node);\r\n    },\r\n    /**\r\n     * Set buffer to save selected node\r\n     * @param {String} key The key of selected node\r\n     **/\r\n    setBuffer: function(key) {\r\n\r\n        this.clearBuffer();\r\n\r\n        var node = this.find(key);\r\n\r\n        this.notify('select', node);\r\n\r\n        /**\r\n         * @api\r\n         * @event TreeModel#select\r\n         * @param {{id: string, value: string}} eventData\r\n         * @example\r\n         * // 노드를 선택시 발생\r\n         * tree.model.on('select', function(object) {\r\n         *     document.getElementById('selectValue').value = object.value;\r\n         * });\r\n         */\r\n        this.fire('select', {id: key, value: node.value });\r\n\r\n        this.buffer = node;\r\n    },\r\n\r\n    /**\r\n     * Empty buffer\r\n     */\r\n    clearBuffer: function() {\r\n\r\n        if (!this.buffer) {\r\n            return;\r\n        }\r\n\r\n        this.notify('unselect', this.buffer);\r\n        this.buffer = null;\r\n\r\n    },\r\n\r\n    /**\r\n     * Check movable positon\r\n     * @param {object} dest A destination node\r\n     * @param {object} node A target node\r\n     */\r\n    isDisable: function(dest, node) {\r\n        if (dest.depth === node.depth) {\r\n            return false;\r\n        }\r\n        if (dest.parentId) {\r\n            if (dest.id === node.parentId) {\r\n                return true;\r\n            }\r\n            if (dest.parentId === node.id) {\r\n                return true;\r\n            } else {\r\n                return this.isDisable(this.find(dest.parentId), node);\r\n            }\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sort by title\r\n     * @param {string} pid\r\n     * @param {string} nid\r\n     * @return {number}\r\n     */\r\n    sort: function(pid, nid) {\r\n        var p = this.find(pid),\r\n            n = this.find(nid);\r\n\r\n        if (!p || !n) {\r\n            return 0;\r\n        }\r\n\r\n        if (p.value &lt; n.value) {\r\n            return -1;\r\n        } else if (p.value > n.value) {\r\n            return 1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n});\r\ntui.util.CustomEvents.mixin(TreeModel);\r\n\r\nmodule.exports = TreeModel;\r\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"