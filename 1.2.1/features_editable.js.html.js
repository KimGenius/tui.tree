tui.util.defineNamespace("fedoc.content", {});
fedoc.content["features_editable.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>'use strict';\n\nvar util = require('./../util');\n\nvar API_LIST = [];\n\n/**\n * Set the tree selectable\n * @class Editable\n * @constructor\n * @param {Tree} tree - Tree\n * @param {Object} options - Options\n *  @param {string} options.editableClassName - Classname of editable element\n *  @param {string} options.dataKey - Key of node data to set value\n *  @param {string} options.inputClassName - Classname of input element\n */\nvar Editable = tui.util.defineClass(/** @lends Editable.prototype */{/*eslint-disable*/\n    static: {\n        /**\n         * @static\n         * @memberOf Selectable\n         * @returns {Array.&lt;string>} API list of Editable\n         */\n        getAPIList: function() {\n            return API_LIST.slice();\n        }\n    },\n\n    init: function(tree, options) { /*eslint-enable*/\n        options = tui.util.extend({}, options);\n        this.tree = tree;\n        this.editableClassName = options.editableClassName;\n        this.dataKey = options.dataKey;\n        this.inputElement = this.createInputElement(options.inputClassName);\n        this.boundOnKeyup = tui.util.bind(this.onKeyup, this);\n        this.boundOnBlur = tui.util.bind(this.onBlur, this);\n\n        tree.on('doubleClick', this.onDoubleClick, this);\n        util.addEventListener(this.inputElement, 'keyup', this.boundOnKeyup);\n        util.addEventListener(this.inputElement, 'blur', this.boundOnBlur);\n    },\n\n    /**\n     * Detach input element from document\n     */\n    detachInputFromDocument: function() {\n        var inputEl = this.inputElement,\n            parentNode = inputEl.parentNode;\n\n        if (parentNode) {\n            parentNode.removeChild(inputEl);\n        }\n    },\n\n    /**\n     * Disable this module\n     */\n    destroy: function() {\n        this.detachInputFromDocument();\n        this.tree.off(this);\n        util.removeEventListener(this.inputElement, 'keyup', this.boundOnKeyup);\n        util.removeEventListener(this.inputElement, 'blur', this.boundOnBlur);\n    },\n\n    /**\n     * Create input element\n     * @param {string} inputClassName - Classname of input element\n     * @returns {HTMLElement} Input element\n     */\n    createInputElement: function(inputClassName) {\n        var el = document.createElement('INPUT');\n        if (inputClassName) {\n            el.className = inputClassName;\n        }\n        el.setAttribute('type', 'text');\n\n        return el;\n    },\n\n    /**\n     * Custom event handler \"doubleClick\"\n     * @param {MouseEvent} event - Mouse event\n     */\n    onDoubleClick: function(event) {\n        var tree = this.tree,\n            target = util.getTarget(event),\n            inputElement, nodeId;\n\n        if (util.hasClass(target, this.editableClassName)) {\n            nodeId = tree.getNodeIdFromElement(target);\n\n            inputElement = this.inputElement;\n            inputElement.value = tree.getNodeData(nodeId)[this.dataKey] || '';\n            target.parentNode.insertBefore(inputElement, target);\n            target.style.display = 'none';\n            inputElement.focus();\n        }\n    },\n\n    /**\n     * Event handler: keyup - input element\n     * @param {Event} event - Key event\n     */\n    onKeyup: function(event) {\n        if (event.keyCode === 13) { // keyup \"enter\"\n            this.setData();\n        }\n    },\n\n    /**\n     * Event handler: blur - input element\n     */\n    onBlur: function() {\n        this.setData();\n    },\n\n    /**\n     * Set data of input element to node and detach input element from doc.\n     */\n    setData: function() {\n        var tree = this.tree,\n            nodeId = tree.getNodeIdFromElement(this.inputElement),\n            data = {};\n\n        if (nodeId) {\n            data[this.dataKey] = this.inputElement.value;\n            tree.setNodeData(nodeId, data);\n        }\n        this.detachInputFromDocument();\n    }\n});\n\nmodule.exports = Editable;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"