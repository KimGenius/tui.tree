tui.util.defineNamespace("fedoc.content", {});
fedoc.content["treeNode.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>'use strict';\n\nvar states = require('./consts/states').node,\n    util = require('./util');\n\nvar lastIndex = 0,\n    getNextIndex = function() {\n        var index = lastIndex;\n        lastIndex += 1;\n\n        return index;\n    },\n    RESERVED_PROPERTIES = {\n        id: '',\n        state: 'setState',\n        children: ''\n    },\n    inArray = tui.util.inArray;\n\n/**\n * TreeNode\n * @Constructor TreeNode\n * @param {Object} nodeData - Node data\n * @param {string} [parentId] - Parent node id\n */\nvar TreeNode = tui.util.defineClass(/** @lends TreeNode.prototype */{ /*eslint-disable*/\n    static: {\n        /**\n         * Set prefix of id\n         * @param {string} prefix - Prefix of id\n         */\n        setIdPrefix: function(prefix) {\n            this.idPrefix = prefix || this.idPrefix;\n        },\n\n        /**\n         * Prefix of id\n         * @type {string}\n         */\n        idPrefix: ''\n    },\n    init: function(nodeData, parentId) { /*eslint-enable*/\n        /**\n         * Node id\n         * @type {string}\n         * @private\n         */\n        this._id = this.constructor.idPrefix + getNextIndex();\n\n        /**\n         * Parent node id\n         * @type {string}\n         * @private\n         */\n        this._parentId = parentId;\n\n        /**\n         * Id list of children\n         * @type {Array.&lt;number>}\n         * @private\n         */\n        this._childIds = [];\n\n        /**\n         * Node data\n         * @type {object}\n         * @private\n         */\n        this._data = {};\n\n        /**\n         * Node state\n         * @type {string}\n         * @private\n         */\n        this._state = states.CLOSED;\n\n        this.setData(nodeData);\n    },\n\n    /**\n     * Set reserved properties from data\n     * @param {object} data - Node data\n     * @returns {object} Node data\n     * @private\n     */\n    _setReservedProperties: function(data) {\n        tui.util.forEachOwnProperties(RESERVED_PROPERTIES, function(setter, name) {\n            var value = data[name];\n\n            if (value &amp;&amp; setter) {\n                this[setter](value);\n            }\n            delete data[name];\n        }, this);\n\n        return data;\n    },\n\n    /**\n     * Toggle state\n     * @api\n     */\n    toggleState: function() {\n        if (this._state === states.CLOSED) {\n            this._state = states.OPENED;\n        } else {\n            this._state = states.CLOSED;\n        }\n    },\n\n    /**\n     * Set state\n     * @api\n     * @param {string} state - State of node ('closed', 'opened')\n     */\n    setState: function(state) {\n        state = String(state);\n        this._state = states[state.toUpperCase()] || this._state;\n    },\n\n    /**\n     * Get state\n     * @api\n     * @returns {string} state ('opened' or 'closed')\n     */\n    getState: function() {\n        return this._state;\n    },\n\n    /**\n     * Get id\n     * @api\n     * @returns {string} Node id\n     */\n    getId: function() {\n        return this._id;\n    },\n\n    /**\n     * Get parent id\n     * @api\n     * @returns {string} Parent node id\n     */\n    getParentId: function() {\n        return this._parentId;\n    },\n\n    /**\n     * Set parent id\n     * @param {string} parentId - Parent node id\n     */\n    setParentId: function(parentId) {\n        this._parentId = parentId;\n    },\n\n    /**\n     * Replace childIds\n     * @param {Array.&lt;number>} childIds - Id list of children\n     */\n    replaceChildIds: function(childIds) {\n        this._childIds = childIds;\n    },\n\n    /**\n     * Get id list of children\n     * @api\n     * @returns {Array.&lt;number>} Id list of children\n     */\n    getChildIds: function() {\n        return this._childIds.slice();\n    },\n\n    /**\n     * Add child id\n     * @param {string} id - Child node id\n     */\n    addChildId: function(id) {\n        var childIds = this._childIds;\n\n        if (tui.util.inArray(childIds, id) === -1) {\n            childIds.push(id);\n        }\n    },\n\n    /**\n     * Remove child id\n     * @param {string} id - Child node id\n     */\n    removeChildId: function(id) {\n        util.removeItemFromArray(id, this._childIds);\n    },\n\n    /**\n     * Get data\n     * @api\n     * @param {string} name - Property name of data\n     * @returns {*} Data\n     */\n    getData: function(name) {\n        return this._data[name];\n    },\n\n    /**\n     * Get all data\n     * @api\n     * @returns {Object} Data\n     */\n    getAllData: function() {\n        return tui.util.extend({}, this._data);\n    },\n\n    /**\n     * Set data\n     * @api\n     * @param {Object} data - Data for adding\n     */\n    setData: function(data) {\n        data = this._setReservedProperties(data);\n        tui.util.extend(this._data, data);\n    },\n\n    /**\n     * Remove data\n     * @api\n     * @param {...string} names - Names of data\n     */\n    removeData: function() {\n        tui.util.forEachArray(arguments, function(name) {\n            delete this._data[name];\n        }, this);\n    },\n\n    /**\n     * Return true if this node has a provided child id.\n     * @api\n     * @param {string} id - Node id\n     * @returns {boolean} - Whether this node has a provided child id.\n     */\n    hasChild: function(id) {\n        return inArray(id, this._childIds) !== -1;\n    },\n\n    /**\n     * Return whether this node is leaf.\n     * @api\n     * @returns {boolean} Node is leaf or not.\n     */\n    isLeaf: function() {\n        return this._childIds.length === 0;\n    },\n\n    /**\n     * Return whether this node is root.\n     * @api\n     * @returns {boolean} Node is root or not.\n     */\n    isRoot: function() {\n        return tui.util.isFalsy(this._parentId);\n    }\n});\nmodule.exports = TreeNode;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"