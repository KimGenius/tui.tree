tui.util.defineNamespace("fedoc.content", {});
fedoc.content["features_checkbox.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>'use strict';\n\nvar util = require('../util.js');\nvar API_LIST = [\n    'check',\n    'uncheck',\n    'toggleCheck',\n    'isChecked',\n    'isIndeterminate',\n    'isUnchecked',\n    'getCheckedList',\n    'getTopCheckedList',\n    'getBottomCheckedList'\n];\n\n/**\n * Checkbox tri-states\n */\nvar STATE_CHECKED = 1,\n    STATE_UNCHECKED = 2,\n    STATE_INDETERMINATE = 3,\n    DATA_KEY_FOR_CHECKBOX_STATE = '__CheckBoxState__',\n    DATA = {};\n\nvar filter = tui.util.filter,\n    forEach = tui.util.forEach;\n/**\n * Set the checkbox-api\n * @class Checkbox\n * @constructor\n * @param {Tree} tree - Tree\n * @param {Object} option - Option\n *  @param {string} option.checkboxClassName - Classname of checkbox element\n */\nvar Checkbox = tui.util.defineClass(/** @lends Checkbox.prototype */{ /*eslint-disable*/\n    static: {\n        /**\n         * @static\n         * @memberOf Checkbox\n         * @returns {Array.&lt;string>} API list of checkbox\n         */\n        getAPIList: function() {\n            return API_LIST.slice();\n        }\n    },\n    init: function(tree, option) {/*eslint-enable*/\n        option = tui.util.extend({}, option);\n\n        this.tree = tree;\n        this.checkboxClassName = option.checkboxClassName;\n        this.checkedList = [];\n        this.rootCheckbox = document.createElement('INPUT');\n        this.rootCheckbox.type = 'checkbox';\n\n        this._setAPIs();\n        this._attachEvents();\n    },\n\n    /**\n     * Disable this module\n     */\n    destroy: function() {\n        var tree = this.tree;\n\n        tree.off(this);\n        forEach(API_LIST, function(apiName) {\n            delete tree[apiName];\n        });\n    },\n\n    /**\n     * Set apis of checkbox tree\n     * @private\n     */\n    _setAPIs: function() {\n        var tree = this.tree,\n            bind = tui.util.bind;\n\n        forEach(API_LIST, function(apiName) {\n            tree[apiName] = bind(this[apiName], this);\n        }, this);\n    },\n\n    /**\n     * Attach event to tree instance\n     * @private\n     */\n    _attachEvents: function() {\n        this.tree.on({\n            singleClick: function(event) {\n                var target = util.getTarget(event),\n                    nodeId, state;\n\n                if (util.hasClass(target, this.checkboxClassName)) {\n                    nodeId = this.tree.getNodeIdFromElement(target);\n                    state = this._getStateFromCheckbox(target);\n                    this._continuePostprocessing(nodeId, state);\n                }\n            },\n            afterDraw: function(nodeId) {\n                if (this.tree.isMovingNode) {\n                    return;\n                }\n                this._reflectChanges(nodeId);\n            },\n            move: function(data) {\n                //@todo - Optimization\n                this._reflectChanges(data.originalParentId);\n                this._reflectChanges(data.newParentId);\n            }\n        }, this);\n    },\n\n    /**\n     * Reflect the changes on node.\n     * @param {string} nodeId - Node id\n     * @private\n     */\n    _reflectChanges: function(nodeId) {\n        this.tree.each(function(descendant, descendantId) {\n            this._setState(descendantId, this._getState(descendantId), true);\n        }, nodeId, this);\n        this._judgeOwnState(nodeId);\n        this._updateAllAncestorsState(nodeId);\n    },\n\n    /**\n     * Set checkbox attributes (checked, indeterminate)\n     * @param {Element} checkbox - Checkbox element\n     * @param {boolean} isChecked - \"checked\"\n     * @param {boolean} isIndeterminate - \"indeterminate\"\n     * @private\n     */\n    _setCheckboxAttr: function(checkbox, isChecked, isIndeterminate) {\n        checkbox.indeterminate = isIndeterminate;\n        checkbox.checked = isChecked;\n    },\n\n    /**\n     * Get checking state of node\n     * @param {string} nodeId - Node id\n     * @param {number} state - State for checkbox\n     * @param {boolean} [stopPropagation] - If true, stop changing state propagation\n     * @private\n     */\n    _setState: function(nodeId, state, stopPropagation) {\n        var checkbox = this._getCheckboxElement(nodeId);\n\n        if (!checkbox) {\n            return;\n        }\n\n        switch (state) {\n            case STATE_CHECKED:\n                this._setCheckboxAttr(checkbox, true, false);\n                break;\n            case STATE_UNCHECKED:\n                this._setCheckboxAttr(checkbox, false, false);\n                break;\n            case STATE_INDETERMINATE:\n                this._setCheckboxAttr(checkbox, false, true);\n                break;\n            default: // no more process if the state is invalid\n                return;\n        }\n\n        this._continuePostprocessing(nodeId, state, stopPropagation);\n    },\n\n    /**\n     * Get checking state of node\n     * @param {string} nodeId - Node id\n     * @returns {number} Checking state\n     * @private\n     */\n    _getState: function(nodeId) {\n        var tree = this.tree,\n            state = tree.getNodeData(nodeId)[DATA_KEY_FOR_CHECKBOX_STATE],\n            checkbox;\n\n        if (!state) {\n            checkbox = this._getCheckboxElement(nodeId);\n            state = this._getStateFromCheckbox(checkbox);\n        }\n\n        return state;\n    },\n\n    /**\n     * Get checking state of node element\n     * @private\n     * @param {Element} checkbox - Checkbox element\n     * @returns {?number} Checking state\n     */\n    _getStateFromCheckbox: function(checkbox) {\n        var state;\n\n        if (!checkbox) {\n            return null;\n        }\n\n        if (checkbox.checked) {\n            state = STATE_CHECKED;\n        } else if (checkbox.indeterminate) {\n            state = STATE_INDETERMINATE;\n        } else {\n            state = STATE_UNCHECKED;\n        }\n\n        return state;\n    },\n\n    /**\n     * Continue post-processing from changing:checkbox-state\n     * @param {string} nodeId - Node id\n     * @param {number} state - Checkbox state\n     * @param {boolean} [stopPropagation] - If true, stop update-propagation\n     * @private\n     */\n    _continuePostprocessing: function(nodeId, state, stopPropagation) {\n        var tree = this.tree,\n            checkedList = this.checkedList,\n            eventName;\n\n        /* Prevent duplicated node id */\n        util.removeItemFromArray(nodeId, checkedList);\n\n        if (state === STATE_CHECKED) {\n            checkedList.push(nodeId);\n            /**\n             * @api\n             * @event Tree#check\n             * @param {string} nodeId - Checked node id\n             * @example\n             * tree.on('check', function(nodeId) {\n             *     console.log('checked: ' + nodeId);\n             * });\n             */\n            eventName = 'check';\n        } else if (state === STATE_UNCHECKED) {\n            /**\n             * @api\n             * @event Tree#uncheck\n             * @param {string} nodeId - Unchecked node id\n             * @example\n             * tree.on('uncheck', function(nodeId) {\n             *     console.log('unchecked: ' + nodeId);\n             * });\n             */\n            eventName = 'uncheck';\n        }\n        DATA[DATA_KEY_FOR_CHECKBOX_STATE] = state;\n\n        tree.setNodeData(nodeId, DATA, {\n            isSilent: true\n        });\n\n        if (!stopPropagation) {\n            this._propagateState(nodeId, state);\n            tree.fire(eventName, nodeId);\n        }\n    },\n\n    /**\n     * Propagate a node state to descendants and ancestors for updating their states\n     * @param {string} nodeId - Node id\n     * @param {number} state - Checkbox state\n     * @private\n     */\n    _propagateState: function(nodeId, state) {\n        if (state === STATE_INDETERMINATE) {\n            return;\n        }\n\n        this._updateAllDescendantsState(nodeId, state);\n        this._updateAllAncestorsState(nodeId);\n    },\n\n    /**\n     * Update all descendants state\n     * @param {string} nodeId - Node id\n     * @param {number} state - State for checkbox\n     * @private\n     */\n    _updateAllDescendantsState: function(nodeId, state) {\n        this.tree.each(function(descendant, descendantId) {\n            this._setState(descendantId, state, true);\n        }, nodeId, this);\n    },\n\n    /**\n     * Update all ancestors state\n     * @param {string} nodeId - Node id\n     * @private\n     */\n    _updateAllAncestorsState: function(nodeId) {\n        var tree = this.tree,\n            parentId = tree.getParentId(nodeId);\n\n        while (parentId) {\n            this._judgeOwnState(parentId);\n            parentId = tree.getParentId(parentId);\n        }\n    },\n\n    /**\n     * Judge own state from child node is changed\n     * @param {string} nodeId - Node id\n     * @private\n     */\n    _judgeOwnState: function(nodeId) {\n        var tree = this.tree,\n            childIds = tree.getChildIds(nodeId),\n            checked = true,\n            unchecked = true;\n\n        if (!childIds.length) {\n            checked = this.isChecked(nodeId);\n        } else {\n            forEach(childIds, function(childId) {\n                var state = this._getState(childId);\n                checked = (checked &amp;&amp; state === STATE_CHECKED);\n                unchecked = (unchecked &amp;&amp; state === STATE_UNCHECKED);\n\n                return checked || unchecked;\n            }, this);\n        }\n\n        if (checked) {\n            this._setState(nodeId, STATE_CHECKED, true);\n        } else if (unchecked) {\n            this._setState(nodeId, STATE_UNCHECKED, true);\n        } else {\n            this._setState(nodeId, STATE_INDETERMINATE, true);\n        }\n    },\n\n    /**\n     * Get checkbox element of node\n     * @param {string} nodeId - Node id\n     * @returns {?HTMLElement} Checkbox element\n     * @private\n     */\n    _getCheckboxElement: function(nodeId) {\n        var tree = this.tree,\n            el, nodeEl;\n\n        if (nodeId === tree.getRootNodeId()) {\n            el = this.rootCheckbox;\n        } else {\n            nodeEl = document.getElementById(nodeId);\n            if (!nodeEl) {\n                return null;\n            }\n            el = util.getElementsByClassName(\n                nodeEl,\n                this.checkboxClassName\n            )[0];\n        }\n\n        return el;\n    },\n\n    /**\n     * Check node\n     * @api\n     * @memberOf Tree.prototype\n     * @param {string} nodeId - Node id\n     * @example\n     * var nodeId = 'tui-tree-node-3';\n     * tree.check(nodeId);\n     */\n    check: function(nodeId) {\n        if (!this.isChecked(nodeId)) {\n            this._setState(nodeId, STATE_CHECKED);\n        }\n    },\n\n    /**\n     * Uncheck node\n     * @api\n     * @memberOf Tree.prototype\n     * @param {string} nodeId - Node id\n     * @example\n     * var nodeId = 'tui-tree-node-3';\n     * tree.uncheck(nodeId);\n     */\n    uncheck: function(nodeId) {\n        if (!this.isUnchecked(nodeId)) {\n            this._setState(nodeId, STATE_UNCHECKED);\n        }\n    },\n\n    /**\n     * Toggle node checking\n     * @api\n     * @memberOf Tree.prototype\n     * @param {string} nodeId - Node id\n     * @example\n     * var nodeId = 'tui-tree-node-3';\n     * tree.toggleCheck(nodeId);\n     */\n    toggleCheck: function(nodeId) {\n        if (!this.isChecked(nodeId)) {\n            this.check(nodeId);\n        } else {\n            this.uncheck(nodeId);\n        }\n    },\n\n    /**\n     * Whether the node is checked\n     * @api\n     * @memberOf Tree.prototype\n     * @param {string} nodeId - Node id\n     * @returns {boolean} True if node is indeterminate\n     * @example\n     * var nodeId = 'tui-tree-node-3';\n     * tree.check(nodeId);\n     * console.log(tree.isChecked(nodeId)); // true\n     */\n    isChecked: function(nodeId) {\n        return STATE_CHECKED === this._getState(nodeId);\n    },\n\n    /**\n     * Whether the node is indeterminate\n     * @api\n     * @memberOf Tree.prototype\n     * @param {string} nodeId - Node id\n     * @returns {boolean} True if node is indeterminate\n     * @example\n     * var nodeId = 'tui-tree-node-3';\n     * tree.check(nodeId);\n     * console.log(tree.isIndeterminate(nodeId)); // false\n     */\n    isIndeterminate: function(nodeId) {\n        return STATE_INDETERMINATE === this._getState(nodeId);\n    },\n\n    /**\n     * Whether the node is unchecked or not\n     * @api\n     * @memberOf Tree.prototype\n     * @param {string} nodeId - Node id\n     * @returns {boolean} True if node is unchecked.\n     * @example\n     * var nodeId = 'tui-tree-node-3';\n     * tree.uncheck(nodeId);\n     * console.log(tree.isUnchecked(nodeId)); // true\n     */\n    isUnchecked: function(nodeId) {\n        return STATE_UNCHECKED === this._getState(nodeId);\n    },\n\n    /**\n     * Get checked list\n     * @api\n     * @memberOf Tree.prototype\n     * @param {string} [parentId] - Node id (default: rootNode id)\n     * @returns {Array.&lt;string>} Checked node ids\n     * @example\n     * //\n     * // node1(v)\n     * //   node2(v)\n     * //   node3(v)\n     * // node4\n     * //   node5(v)\n     * // node6\n     * //   node7(v)\n     * //     node8(v)\n     * //   node9\n     *\n     * var allCheckedList = tree.getCheckedList(); // ['node1', 'node2', 'node3' ,....]\n     * var descendantsCheckedList = tree.getCheekedList('node6'); // ['node7', 'node8']\n     */\n    getCheckedList: function(parentId) {\n        var tree = this.tree,\n            checkedList = this.checkedList;\n\n        if (!parentId) {\n            return checkedList.slice();\n        }\n\n        return filter(checkedList, function(nodeId) {\n            return tree.contains(parentId, nodeId);\n        });\n    },\n\n    /**\n     * Get top checked list\n     * @api\n     * @memberOf Tree.prototype\n     * @param {string} [parentId] - Node id (default: rootNode id)\n     * @returns {Array.&lt;string>} Checked node ids\n     * @example\n     * //\n     * // node1(v)\n     * //   node2(v)\n     * //   node3(v)\n     * // node4\n     * //   node5(v)\n     * // node6\n     * //   node7(v)\n     * //     node8(v)\n     * //   node9\n     *\n     * var allTopCheckedList = tree.getTopCheckedList(); // ['node1', 'node5', 'node7']\n     * var descendantsTopCheckedList = tree.getTopCheekedList('node6'); // ['node7']\n     */\n    getTopCheckedList: function(parentId) {\n        var tree = this.tree,\n            checkedList = [],\n            state;\n\n        parentId = parentId || tree.getRootNodeId();\n        state = this._getState(parentId);\n        if (state === STATE_CHECKED) {\n            checkedList = tree.getChildIds(parentId);\n        } else if (state === STATE_INDETERMINATE) {\n            checkedList = this.getCheckedList(parentId);\n            checkedList = filter(checkedList, function(nodeId) {\n                return !this.isChecked(tree.getParentId(nodeId));\n            }, this);\n        }\n\n        return checkedList;\n    },\n\n    /**\n     * Get bottom checked list\n     * @api\n     * @memberOf Tree.prototype\n     * @param {string} [parentId] - Node id (default: rootNode id)\n     * @returns {Array.&lt;string>} Checked node ids\n     * @example\n     * //\n     * // node1(v)\n     * //   node2(v)\n     * //   node3(v)\n     * // node4\n     * //   node5(v)\n     * // node6\n     * //   node7(v)\n     * //     node8(v)\n     * //   node9\n     *\n     * var allBottomCheckedList = tree.getBottomCheckedList(); // ['node2', 'node3', 'node5', 'node8']\n     * var descendantsBottomCheckedList = tree.getBottomCheekedList('node6'); // ['node8']\n     */\n    getBottomCheckedList: function(parentId) {\n        var tree = this.tree,\n            checkedList;\n\n        parentId = parentId || tree.getRootNodeId();\n        checkedList = this.getCheckedList(parentId);\n\n        return filter(checkedList, function(nodeId) {\n            return tree.isLeaf(nodeId);\n        });\n    }\n});\n\ntui.util.CustomEvents.mixin(Checkbox);\nmodule.exports = Checkbox;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"