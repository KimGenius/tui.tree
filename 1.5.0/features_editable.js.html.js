tui.util.defineNamespace("fedoc.content", {});
fedoc.content["features_editable.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>'use strict';\n\nvar util = require('./../util');\nvar ajaxCommand = require('./../consts/ajaxCommand');\nvar states = require('./../consts/states');\n\nvar API_LIST = [\n    'createChildNode',\n    'editNode'\n];\nvar EDIT_TYPE = {\n    CREATE: 'create',\n    UPDATE: 'update'\n};\n\n/**\n * Set the tree selectable\n * @class Editable\n * @constructor\n * @param {Tree} tree - Tree\n * @param {Object} options - Options\n *  @param {string} options.editableClassName - Classname of editable element\n *  @param {string} options.dataKey - Key of node data to set value\n *  @param {string} [options.dataValue] - Value of node data to set value (Use \"createNode\" API)\n *  @param {string} [options.inputClassName] - Classname of input element\n */\nvar Editable = tui.util.defineClass(/** @lends Editable.prototype */{/*eslint-disable*/\n    static: {\n        /**\n         * @static\n         * @memberOf Selectable\n         * @returns {Array.&lt;string>} API list of Editable\n         */\n        getAPIList: function() {\n            return API_LIST.slice();\n        }\n    },\n    init: function(tree, options) { /*eslint-enable*/\n        options = tui.util.extend({}, options);\n\n        /**\n         * Tree\n         * @type {Tree}\n         */\n        this.tree = tree;\n\n        /**\n         * Classname of editable element\n         * @type {string}\n         */\n        this.editableClassName = options.editableClassName;\n\n        /**\n         * Key of node data to set value\n         * @type {string}\n         */\n        this.dataKey = options.dataKey;\n\n        /**\n         * Default value for creating node\n         * @type {string}\n         */\n        this.defaultValue = options.defaultValue || '';\n\n        /**\n         * Input element for create or edit\n         * @type {HTMLElement}\n         */\n        this.inputElement = this._createInputElement(options.inputClassName);\n\n        /**\n         * Action mode - create or edit\n         * @type {string}\n         */\n        this.mode = null;\n\n        /**\n         * Keyup event handler\n         * @type {Function}\n         */\n        this.boundOnKeyup = tui.util.bind(this._onKeyup, this);\n\n        /**\n         * Blur event handler\n         * @type {Function}\n         */\n        this.boundOnBlur = tui.util.bind(this._onBlur, this);\n\n        tree.on('doubleClick', this._onDoubleClick, this);\n\n        this._setAPIs();\n    },\n\n    /**\n     * Disable this module\n     */\n    destroy: function() {\n        var tree = this.tree;\n\n        this._detachInputElement();\n        tree.off(this);\n        tui.util.forEach(API_LIST, function(apiName) {\n            delete tree[apiName];\n        });\n    },\n\n    /**\n     * Create child node\n     * @api\n     * @memberOf Tree.prototype\n     * @requires Editable\n     * @param {string} parentId - Parent node id to create new node\n     * @example\n     * tree.createChildNode('tui-tree-node-1');\n     */\n    createChildNode: function(parentId) {\n        var tree = this.tree;\n        var useAjax = tree.enabledFeatures.Ajax;\n        var nodeId;\n\n        this.mode = EDIT_TYPE.CREATE;\n\n        if (useAjax) {\n            tree.on('successAjaxResponse', this._onSuccessResponse, this);\n        }\n\n        if (!tree.isLeaf(parentId) &amp;&amp;\n            tree.getState(parentId) === states.node.CLOSED) {\n            tree.open(parentId);\n        } else {\n            nodeId = tree._add({}, parentId)[0];\n            this._attachInputElement(nodeId);\n        }\n    },\n\n    /**\n     * Edit node\n     * @api\n     * @memberOf Tree.prototype\n     * @requires Editable\n     * @param {string} nodeId - Node id\n     * @example\n     * tree.editNode('tui-tree-node-1');\n     */\n    editNode: function(nodeId) {\n        this.mode = EDIT_TYPE.UPDATE;\n        this._attachInputElement(nodeId);\n    },\n\n    /**\n     * Custom event handler \"successResponse\"\n     * @param {string} type - Ajax command type\n     * @param {Array.&lt;string>} nodeIds - Added node ids on tree\n     * @private\n     */\n    _onSuccessResponse: function(type, nodeIds) {\n        var tree = this.tree;\n        var parentId, nodeId;\n\n        if (type === ajaxCommand.READ &amp;&amp; nodeIds) {\n            parentId = tree.getParentId(nodeIds[0]);\n            nodeId = tree._add({}, parentId)[0];\n            this._attachInputElement(nodeId);\n        }\n    },\n\n    /**\n     * Custom event handler \"doubleClick\"\n     * @param {MouseEvent} event - Mouse event\n     * @private\n     */\n    _onDoubleClick: function(event) {\n        var target = util.getTarget(event);\n        var nodeId;\n\n        if (util.hasClass(target, this.editableClassName)) {\n            nodeId = this.tree.getNodeIdFromElement(target);\n            this.editNode(nodeId);\n        }\n    },\n\n    /**\n     * Event handler: keyup - input element\n     * @param {Event} event - Key event\n     * @private\n     */\n    _onKeyup: function(event) {\n        /**\n         * To prevent firing blur event after enter event is fired.\n         */\n        util.removeEventListener(this.inputElement, 'blur', this.boundOnBlur);\n\n        if (event.keyCode === 13) { // keyup \"enter\"\n            if (this.mode === EDIT_TYPE.CREATE) {\n                this._addData();\n            } else {\n                this._setData();\n            }\n        }\n    },\n\n    /**\n     * Event handler: blur - input element\n     * @private\n     */\n    _onBlur: function() {\n        if (this.mode === EDIT_TYPE.CREATE) {\n            this._addData();\n        } else {\n            this._setData();\n        }\n    },\n\n    /**\n     * Create input element\n     * @param {string} inputClassName - Classname of input element\n     * @returns {HTMLElement} Input element\n     * @private\n     */\n    _createInputElement: function(inputClassName) {\n        var el = document.createElement('INPUT');\n        if (inputClassName) {\n            el.className = inputClassName;\n        }\n        el.setAttribute('type', 'text');\n\n        return el;\n    },\n\n    /**\n     * Attach input element on tree\n     * @param {string} nodeId - Node id\n     * @private\n     */\n    _attachInputElement: function(nodeId) {\n        var tree = this.tree;\n        var target = document.getElementById(nodeId);\n        var textElement = util.getElementsByClassName(target, tree.classNames.textClass)[0];\n        var inputElement;\n\n        inputElement = this.inputElement;\n        inputElement.value = tree.getNodeData(nodeId)[this.dataKey] || '';\n\n        textElement.parentNode.insertBefore(inputElement, textElement);\n        textElement.style.display = 'none';\n\n        this.inputElement = target.getElementsByTagName('input')[0];\n        this.inputElement.focus();\n\n        util.addEventListener(this.inputElement, 'keyup', this.boundOnKeyup);\n        util.addEventListener(this.inputElement, 'blur', this.boundOnBlur);\n    },\n\n    /**\n     * Detach input element on tree\n     * @private\n     */\n    _detachInputElement: function() {\n        var tree = this.tree;\n        var inputEl = this.inputElement;\n        var parentNode = inputEl.parentNode;\n\n        if (parentNode) {\n            parentNode.removeChild(inputEl);\n        }\n\n        if (tree.enabledFeatures.Ajax) {\n            tree.off(this, 'successAjaxResponse');\n        }\n\n        util.removeEventListener(this.inputElement, 'keyup', this.boundOnKeyup);\n        util.removeEventListener(this.inputElement, 'blur', this.boundOnBlur);\n    },\n\n    /**\n     * Add data of input element to node and detach input element on tree\n     * @private\n     */\n    _addData: function() {\n        var tree = this.tree;\n        var nodeId = tree.getNodeIdFromElement(this.inputElement);\n        var parentId = tree.getParentId(nodeId);\n        var value = this.inputElement.value || this.defaultValue;\n        var data = {};\n\n        /**\n         * @api\n         * @event Tree#beforeCreateChildNode\n         * @param {string} value - Return value of creating input element\n         * @example\n         * tree\n         *  .enableFeature('Editable')\n         *  .on('beforeCreateChildNode', function(value) {\n         *      console.log(value);\n         *      return false; // It cancels\n         *      // return true; // It execute next\n         *  });\n         */\n        if (!this.tree.invoke('beforeCreateChildNode', value)) {\n            return;\n        }\n\n        if (nodeId) {\n            data[this.dataKey] = value;\n            tree._remove(nodeId);\n            tree.add(data, parentId);\n        }\n        this._detachInputElement();\n    },\n\n    /**\n     * Set data of input element to node and detach input element on tree\n     * @private\n     */\n    _setData: function() {\n        var tree = this.tree;\n        var nodeId = tree.getNodeIdFromElement(this.inputElement);\n        var value = this.inputElement.value;\n        var data = {};\n\n        /**\n         * @api\n         * @event Tree#beforeEditNode\n         * @param {string} value - Return value of editing input element\n         * @example\n         * tree\n         *  .enableFeature('Editable')\n         *  .on('beforeEditNode', function(value) {\n         *      console.log(value);\n         *      return false; // It cancels\n         *      // return true; // It execute next\n         *  });\n         */\n        if (!this.tree.invoke('beforeEditNode', value)) {\n            return;\n        }\n\n        if (nodeId) {\n            data[this.dataKey] = value;\n            tree.setNodeData(nodeId, data);\n        }\n        this._detachInputElement();\n    },\n\n    /**\n     * Set apis of selectable tree\n     * @private\n     */\n    _setAPIs: function() {\n        var tree = this.tree;\n        var bind = tui.util.bind;\n\n        tui.util.forEach(API_LIST, function(apiName) {\n            tree[apiName] = bind(this[apiName], this);\n        }, this);\n    }\n});\n\nmodule.exports = Editable;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"