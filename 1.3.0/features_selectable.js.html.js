tui.util.defineNamespace("fedoc.content", {});
fedoc.content["features_selectable.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>'use strict';\n\nvar util = require('./../util');\n\nvar API_LIST = [\n        'select',\n        'getSelectedNodeId'\n    ],\n    defaults = {\n        selectedClassName: 'tui-tree-selected'\n    };\n\n/**\n * Set the tree selectable\n * @class Selectable\n * @constructor\n * @param {Tree} tree - Tree\n * @param {Object} options\n *  @param {string} options.selectedClassName - Classname for selected node.\n */\nvar Selectable = tui.util.defineClass(/** @lends Selectable.prototype */{/*eslint-disable*/\n    static: {\n        /**\n         * @static\n         * @memberOf Selectable\n         * @returns {Array.&lt;string>} API list of Selectable\n         */\n        getAPIList: function() {\n            return API_LIST.slice();\n        }\n    },\n    init: function(tree, options) { /*eslint-enable*/\n        options = tui.util.extend({}, defaults, options);\n\n        this.tree = tree;\n        this.selectedClassName = options.selectedClassName;\n        this.selectedNodeId = null;\n\n        tree.on({\n            singleClick: this.onSingleClick,\n            afterDraw: this.onAfterDraw\n        }, this);\n        this._setAPIs();\n    },\n\n    /**\n     * Set apis of selectable tree\n     * @private\n     */\n    _setAPIs: function() {\n        var tree = this.tree,\n            bind = tui.util.bind;\n\n        tui.util.forEach(API_LIST, function(apiName) {\n            tree[apiName] = bind(this[apiName], this);\n        }, this);\n    },\n\n    /**\n     * Disable this module\n     */\n    destroy: function() {\n        var tree = this.tree,\n            nodeElement = this.getPrevElement();\n\n        util.removeClass(nodeElement, this.selectedClassName);\n        tree.off(this);\n        tui.util.forEach(API_LIST, function(apiName) {\n            delete tree[apiName];\n        });\n    },\n\n    /**\n     * Custom event handler \"singleClick\"\n     * @param {MouseEvent} event - Mouse event\n     */\n    onSingleClick: function(event) {\n        var target = util.getTarget(event),\n            nodeId = this.tree.getNodeIdFromElement(target);\n\n        this.select(nodeId, target);\n    },\n\n    /* eslint-disable valid-jsdoc\n        Ignore \"target\" parameter annotation for API page\n        \"tree.select(nodeId)\"\n     */\n    /**\n     * Select node if the feature-\"Selectable\" is enabled.\n     * @api\n     * @memberOf Tree.prototype\n     * @requires Selectable\n     * @param {string} nodeId - Node id\n     * @example\n     * tree.select('tui-tree-node-3');\n     */\n    /* eslint-enable valid-jsdoc */\n    select: function(nodeId, target) {\n        var tree, prevElement, nodeElement,\n            selectedClassName, prevNodeId;\n\n        if (!nodeId) {\n            return;\n        }\n\n        tree = this.tree;\n        prevElement = this.getPrevElement();\n        nodeElement = document.getElementById(nodeId);\n        selectedClassName = this.selectedClassName;\n        prevNodeId = this.selectedNodeId;\n\n        /**\n         * @api\n         * @event Tree#beforeSelect\n         * @param {string} nodeId - Selected node id\n         * @param {string} prevNodeId - Previous selected node id\n         * @param {Element|undefined} target - Target element\n         * @example\n         * tree\n         *  .enableFeature('Selectable')\n         *  .on('beforeSelect', function(nodeId, prevNodeId, target) {\n         *      console.log('selected node: ' + nodeId);\n         *      console.log('previous selected node: ' + prevNodeId);\n         *      console.log('target element: ' + target);\n         *      return false; // It cancels \"select\"\n         *      // return true; // It fires \"select\"\n         *  });\n         */\n        if (tree.invoke('beforeSelect', nodeId, prevNodeId, target)) {\n            util.removeClass(prevElement, selectedClassName);\n            util.addClass(nodeElement, selectedClassName);\n\n            /**\n             * @api\n             * @event Tree#select\n             * @param {string} nodeId - Selected node id\n             * @param {string} prevNodeId - Previous selected node id\n             * @param {Element|undefined} target - Target element\n             * @example\n             * tree\n             *  .enableFeature('Selectable')\n             *  .on('select', function(nodeId, prevNodeId, target) {\n             *      console.log('selected node: ' + nodeId);\n             *      console.log('previous selected node: ' + prevNodeId);\n             *      console.log('target element: ' + target);\n             *  });\n             */\n            tree.fire('select', nodeId, prevNodeId, target);\n            this.selectedNodeId = nodeId;\n        }\n    },\n\n    /**\n     * Get previous selected node element\n     * @returns {HTMLElement} Node element\n     */\n    getPrevElement: function() {\n        return document.getElementById(this.selectedNodeId);\n    },\n\n    /**\n     * Get selected node id\n     * @api\n     * @memberOf Tree.prototype\n     * @returns {string} selected node id\n     */\n    getSelectedNodeId: function() {\n        return this.selectedNodeId;\n    },\n\n    /**\n     * Custom event handler - \"afterDraw\"\n     */\n    onAfterDraw: function() {\n        var nodeElement = this.getPrevElement();\n\n        if (nodeElement) {\n            util.addClass(nodeElement, this.selectedClassName);\n        }\n    }\n});\n\nmodule.exports = Selectable;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"