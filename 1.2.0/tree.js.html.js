tui.util.defineNamespace("fedoc.content", {});
fedoc.content["tree.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\r\n * @fileoverview Render tree and update tree.\r\n * @author NHN Ent. FE dev team.&lt;dl_javascript@nhnent.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar util = require('./util'),\r\n    defaultOption = require('./consts/defaultOption'),\r\n    states = require('./consts/states'),\r\n    messages = require('./consts/messages'),\r\n    outerTemplate = require('./consts/outerTemplate'),\r\n    TreeModel = require('./treeModel'),\r\n    Selectable = require('./features/selectable'),\r\n    Draggable = require('./features/draggable'),\r\n    Editable = require('./features/editable'),\r\n    Checkbox = require('./features/checkbox');\r\n\r\nvar nodeStates = states.node,\r\n    features = {\r\n        Selectable: Selectable,\r\n        Draggable: Draggable,\r\n        Editable: Editable,\r\n        Checkbox: Checkbox\r\n    },\r\n    snippet = tui.util,\r\n    extend = snippet.extend,\r\n    TIMEOUT_TO_DIFFERENTIATE_CLICK_AND_DBLCLICK = 200,\r\n    MOUSE_MOVING_THRESHOLD = 5;\r\n/**\r\n * Create tree model and inject data to model\r\n * @class Tree\r\n * @constructor\r\n * @mixes tui.util.CustomEvents\r\n * @param {Object} data A data to be used on tree\r\n * @param {Object} options The options\r\n *     @param {HTMLElement} [options.rootElement] Root element (It should be 'UL' element)\r\n *     @param {string} [options.nodeIdPrefix] A default prefix of a node\r\n *     @param {Object} [options.nodeDefaultState] A default state of a node\r\n *     @param {Object} [options.template] A markup set to make element\r\n *         @param {string} [options.template.internalNode] HTML template\r\n *         @param {string} [options.template.leafNode] HTML template\r\n *     @param {Object} [options.stateLabels] Toggle button state label\r\n *         @param {string} [options.stateLabels.opened] State-OPENED label (Text or HTML)\r\n *         @param {string} [options.stateLabels.closed] State-CLOSED label (Text or HTML)\r\n *     @param {Object} [options.classNames] Class names for tree\r\n *         @param {string} [options.classNames.nodeClass] A class name for node\r\n *         @param {string} [options.classNames.leafClass] A class name for leaf node\r\n *         @param {string} [options.classNames.openedClass] A class name for opened node\r\n *         @param {string} [options.classNames.closedClass] A class name for closed node\r\n *         @param {string} [options.classNames.textClass] A class name that for textElement in node\r\n *         @param {string} [options.classNames.subtreeClass] A class name for subtree in internal node\r\n *         @param {string} [options.classNames.toggleBtnClass] A class name for toggle button in internal node\r\n *     @param {Function} [options.renderTemplate] Function for rendering template\r\n * @example\r\n * //Default options:\r\n * // {\r\n * //     nodeIdPrefix: 'tui-tree-node-'\r\n * //     nodeDefaultState: 'closed',\r\n * //     stateLabels: {\r\n * //         opened: '-',\r\n * //         closed: '+'\r\n * //     },\r\n * //     classNames: {\r\n * //         nodeClass: 'tui-tree-node',\r\n * //         leafClass: 'tui-tree-leaf',\r\n * //         openedClass: 'tui-tree-opened',\r\n * //         closedClass: 'tui-tree-closed',\r\n * //         subtreeClass: 'tui-tree-subtree',\r\n * //         toggleBtnClass: 'tui-tree-toggleBtn',\r\n * //         textClass: 'tui-tree-text',\r\n * //     },\r\n * //     template: {\r\n * //         internalNode:\r\n * //             '&lt;button type=\"button\" class=\"{{toggleBtnClass}}\">{{stateLabel}}&lt;/button>' +\r\n * //             '&lt;span class=\"{{textClass}}\">{{text}}&lt;/span>' +\r\n * //             '&lt;ul class=\"{{subtreeClass}}\">{{children}}&lt;/ul>'\r\n * //         leafNode:\r\n * //             '&lt;span class=\"{{textClass}}\">{{text}}&lt;/span>' +\r\n * //     }\r\n * // }\r\n * //\r\n *\r\n * var data = [\r\n *     {text: 'rootA', children: [\r\n *         {text: 'root-1A'},\r\n *         {text: 'root-1B'},\r\n *         {text: 'root-1C'},\r\n *         {text: 'root-1D'},\r\n *         {text: 'root-2A', children: [\r\n *             {text:'sub_1A', children:[\r\n *                 {text:'sub_sub_1A'}\r\n *             ]},\r\n *             {text:'sub_2A'}\r\n *         ]},\r\n *         {text: 'root-2B'},\r\n *         {text: 'root-2C'},\r\n *         {text: 'root-2D'},\r\n *         {text: 'root-3A', children: [\r\n *             {text:'sub3_a'},\r\n *             {text:'sub3_b'}\r\n *         ]},\r\n *         {text: 'root-3B'},\r\n *         {text: 'root-3C'},\r\n *         {text: 'root-3D'}\r\n *     ]},\r\n *     {text: 'rootB', children: [\r\n *         {text:'B_sub1'},\r\n *         {text:'B_sub2'},\r\n *         {text:'b'}\r\n *     ]}\r\n * ];\r\n *\r\n * var tree1 = new tui.component.Tree(data, {\r\n *     rootElement: 'treeRoot', // or document.getElementById('treeRoot')\r\n *     nodeDefaultState: 'opened',\r\n *\r\n *     // ========= Option: Override template renderer ===========\r\n *\r\n *     template: { // template for Mustache engine\r\n *         internalNode:\r\n *             '&lt;button type=\"button\" class=\"{{toggleBtnClass}}\">{{{stateLabel}}}&lt;/button>' +\r\n *             '&lt;span class=\"{{textClass}}\">{{{text}}}&lt;/span>' +\r\n *             '&lt;ul class=\"{{subtreeClass}}\">{{{children}}}&lt;/ul>'\r\n *         leafNode:\r\n *             '&lt;span class=\"{{textClass}}\">{{{text}}}&lt;/span>' +\r\n *     },\r\n *     renderTemplate: function(source, props) {\r\n *         // Mustache template engine\r\n *         return Mustache.render(template, props);\r\n *     }\r\n * });\r\n **/\r\nvar Tree = snippet.defineClass(/** @lends Tree.prototype */{ /*eslint-disable*/\r\n    init: function(data, options) { /*eslint-enable*/\r\n        options = extend({}, defaultOption, options);\r\n\r\n        /**\r\n         * Default class names\r\n         * @type {object.&lt;string, string>}\r\n         */\r\n        this.classNames = extend({}, defaultOption.classNames, options.classNames);\r\n\r\n        /**\r\n         * Default template\r\n         * @type {{internalNode: string, leafNode: string}}\r\n         */\r\n        this.template = extend({}, defaultOption.template, options.template);\r\n\r\n        /**\r\n         * Root element\r\n         * @type {HTMLElement}\r\n         */\r\n        this.rootElement = options.rootElement;\r\n\r\n        /**\r\n         * Toggle button state label\r\n         * @type {{opened: string, closed: string}}\r\n         */\r\n        this.stateLabels = options.stateLabels;\r\n\r\n        /**\r\n         * Make tree model\r\n         * @type {TreeModel}\r\n         */\r\n        this.model = new TreeModel(data, options);\r\n\r\n        /**\r\n         * Enabled features\r\n         * @type {Object.&lt;string, object>}\r\n         */\r\n        this.enabledFeatures = {};\r\n\r\n        /**\r\n         * Click timer to prevent click-duplication with double click\r\n         * @type {number}\r\n         */\r\n        this.clickTimer = null;\r\n\r\n        /**\r\n         * To prevent click event if mouse moved before mouseup.\r\n         * @type {number}\r\n         */\r\n        this._mouseMovingFlag = false;\r\n\r\n        /**\r\n         * Render template\r\n         * It can be overrode by user's template engine.\r\n         * @type {Function}\r\n         * @private\r\n         */\r\n        this._renderTemplate = options.renderTemplate || util.renderTemplate;\r\n\r\n        /**\r\n         * True when a node is moving\r\n         * @api\r\n         * @type {boolean}\r\n         * @example\r\n         * tree.on({\r\n         *     beforeDraw: function(nodeId) {\r\n         *         if (tree.isMovingNode) {\r\n         *             return;\r\n         *         }\r\n         *         //..\r\n         *     },\r\n         *     //....\r\n         * });\r\n         * tree.move('tui-tree-node-1', 'tui-tree-node-2');\r\n         */\r\n        this.isMovingNode = false;\r\n\r\n        this._setRoot();\r\n        this._draw(this.getRootNodeId());\r\n        this._setEvents();\r\n    },\r\n\r\n    /**\r\n     * Set root element of tree\r\n     * @private\r\n     */\r\n    _setRoot: function() {\r\n        var rootEl = this.rootElement;\r\n\r\n        if (snippet.isString(rootEl)) {\r\n            rootEl = this.rootElement = document.getElementById(rootEl);\r\n        }\r\n\r\n        if (!snippet.isHTMLNode(rootEl)) {\r\n            throw new Error(messages.INVALID_ROOT_ELEMENT);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Move event handler\r\n     * @param {string} nodeId - Node id\r\n     * @param {string} originalParentId - Original parent node id\r\n     * @param {string} newParentId - New parent node id\r\n     * @private\r\n     */\r\n    _onMove: function(nodeId, originalParentId, newParentId) {\r\n        this._draw(originalParentId);\r\n        this._draw(newParentId);\r\n\r\n        /**\r\n         * @api\r\n         * @event Tree#move\r\n         * @param {{nodeId: string, originalParentId: string, newParentId: string}} treeEvent - Tree event\r\n         * @example\r\n         * tree.on('move', function(treeEvent) {\r\n         *     var nodeId = treeEvent.nodeId,\r\n         *         originalParentId = treeEvent.originalParentId,\r\n         *         newParentId = treeEvent.newParentId;\r\n         *\r\n         *     console.log(nodeId, originalParentId, newParentId);\r\n         * });\r\n         */\r\n        this.fire('move', {\r\n            nodeId: nodeId,\r\n            originalParentId: originalParentId,\r\n            newParentId: newParentId\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Set event handlers\r\n     * @private\r\n     */\r\n    _setEvents: function() {\r\n        this.model.on({\r\n            update: this._draw,\r\n            move: this._onMove\r\n        }, this);\r\n        util.addEventListener(this.rootElement, 'click', snippet.bind(this._onClick, this));\r\n        util.addEventListener(this.rootElement, 'mousedown', snippet.bind(this._onMousedown, this));\r\n        util.addEventListener(this.rootElement, 'dblclick', snippet.bind(this._onDoubleClick, this));\r\n    },\r\n\r\n    /**\r\n     * Event handler - mousedown\r\n     * @param {MouseEvent} downEvent - Mouse event\r\n     * @private\r\n     */\r\n    _onMousedown: function(downEvent) {\r\n        var self = this,\r\n            clientX = downEvent.clientX,\r\n            clientY = downEvent.clientY,\r\n            abs = Math.abs;\r\n\r\n        function onMouseMove(moveEvent) {\r\n            var newClientX = moveEvent.clientX,\r\n                newClientY = moveEvent.clientY;\r\n\r\n            if (abs(newClientX - clientX) + abs(newClientY - clientY) > MOUSE_MOVING_THRESHOLD) {\r\n                self.fire('mousemove', moveEvent);\r\n                self._mouseMovingFlag = true;\r\n            }\r\n        }\r\n        function onMouseUp(upEvent) {\r\n            self.fire('mouseup', upEvent);\r\n            util.removeEventListener(document, 'mousemove', onMouseMove);\r\n            util.removeEventListener(document, 'mouseup', onMouseUp);\r\n        }\r\n\r\n        this._mouseMovingFlag = false;\r\n        this.fire('mousedown', downEvent);\r\n        util.addEventListener(document, 'mousemove', onMouseMove);\r\n        util.addEventListener(document, 'mouseup', onMouseUp);\r\n    },\r\n\r\n    /**\r\n     * Event handler - click\r\n     * @param {MouseEvent} event - Click event\r\n     * @private\r\n     */\r\n    _onClick: function(event) {\r\n        var target = util.getTarget(event),\r\n            self = this;\r\n\r\n        if (util.isRightButton(event)) {\r\n            this.clickTimer = null;\r\n            return;\r\n        }\r\n\r\n        if (util.hasClass(target, this.classNames.toggleBtnClass)) {\r\n            this.toggle(this.getNodeIdFromElement(target));\r\n            return;\r\n        }\r\n\r\n        if (!this.clickTimer &amp;&amp; !this._mouseMovingFlag) {\r\n            this.fire('singleClick', event);\r\n            this.clickTimer = setTimeout(function() {\r\n                self.resetClickTimer();\r\n            }, TIMEOUT_TO_DIFFERENTIATE_CLICK_AND_DBLCLICK);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Event handler - double click (dblclick)\r\n     * @param {MouseEvent} event - Double click event\r\n     * @private\r\n     */\r\n    _onDoubleClick: function(event) {\r\n        this.fire('doubleClick', event);\r\n        this.resetClickTimer();\r\n    },\r\n\r\n    /**\r\n     * Set node state - opened or closed\r\n     * @param {string} nodeId - Node id\r\n     * @param {string} state - Node state\r\n     * @private\r\n     */\r\n    _setDisplayFromNodeState: function(nodeId, state) {\r\n        var subtreeElement = this._getSubtreeElement(nodeId),\r\n            label, btnElement, nodeElement;\r\n\r\n        if (!subtreeElement || subtreeElement === this.rootElement) {\r\n            return;\r\n        }\r\n        label = this.stateLabels[state];\r\n        nodeElement = document.getElementById(nodeId);\r\n        btnElement = util.getElementsByClassName(\r\n            nodeElement,\r\n            this.classNames.toggleBtnClass\r\n        )[0];\r\n\r\n        if (state === nodeStates.OPENED) {\r\n            subtreeElement.style.display = '';\r\n        } else {\r\n            subtreeElement.style.display = 'none';\r\n        }\r\n        this._setNodeClassNameFromState(nodeElement, state);\r\n\r\n        if (btnElement) {\r\n            btnElement.innerHTML = label;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Set node class name from provided state\r\n     * @param {HTMLElement} nodeElement - TreeNode element\r\n     * @param {string} state - New changed state\r\n     * @private\r\n     */\r\n    _setNodeClassNameFromState: function(nodeElement, state) {\r\n        var classNames = this.classNames,\r\n            openedClassName = classNames[nodeStates.OPENED + 'Class'],\r\n            closedClassName = classNames[nodeStates.CLOSED + 'Class'];\r\n\r\n        util.removeClass(nodeElement, openedClassName);\r\n        util.removeClass(nodeElement, closedClassName);\r\n        util.addClass(nodeElement, classNames[state + 'Class']);\r\n    },\r\n\r\n    /**\r\n     * Make html\r\n     * @param {Array.&lt;string>} nodeIds - Node id list\r\n     * @returns {string} HTML\r\n     * @private\r\n     * @see outerTemplate uses \"util.renderTemplate\"\r\n     */\r\n    _makeHtml: function(nodeIds) {\r\n        var model = this.model,\r\n            html = '';\r\n\r\n        snippet.forEach(nodeIds, function(nodeId) {\r\n            var node = model.getNode(nodeId),\r\n                sources, props;\r\n\r\n            if (!node) {\r\n                return;\r\n            }\r\n\r\n            sources = this._getTemplate(node);\r\n            props = this._makeTemplateProps(node);\r\n            props.innerTemplate = this._makeInnerHTML(node, {\r\n                source: sources.inner,\r\n                props: props\r\n            });\r\n            html += util.renderTemplate(sources.outer, props);\r\n        }, this);\r\n\r\n        return html;\r\n    },\r\n\r\n    /**\r\n     * Make inner html of node\r\n     * @param {TreeNode} node - Node\r\n     * @param {{source: string, props: Object}} [cached] - Cashed data to make html\r\n     * @returns {string} Inner html of node\r\n     * @private\r\n     * @see innerTemplate uses \"this._renderTemplate\"\r\n     */\r\n    _makeInnerHTML: function(node, cached) {\r\n        var source, props;\r\n\r\n        cached = cached || {};\r\n        source = cached.source || this._getTemplate(node).inner;\r\n        props = cached.props || this._makeTemplateProps(node);\r\n        return this._renderTemplate(source, props);\r\n    },\r\n\r\n    /**\r\n     * Get template sources\r\n     * @param {TreeNode} node - Node\r\n     * @returns {{inner: string, outer: string}} Template sources\r\n     * @private\r\n     */\r\n    _getTemplate: function(node) {\r\n        var source;\r\n\r\n        if (node.isLeaf()) {\r\n            source = {\r\n                inner: this.template.leafNode,\r\n                outer: outerTemplate.LEAF_NODE\r\n            }\r\n        } else {\r\n            source = {\r\n                inner: this.template.internalNode,\r\n                outer: outerTemplate.INTERNAL_NODE\r\n            }\r\n        }\r\n\r\n        return source;\r\n    },\r\n\r\n    /**\r\n     * Make template properties\r\n     * @param {TreeNode} node - Node\r\n     * @return {Object} Template properties\r\n     * @private\r\n     */\r\n    _makeTemplateProps: function(node) {\r\n        var classNames = this.classNames,\r\n            props, state;\r\n\r\n        if (node.isLeaf()) {\r\n            props = {\r\n                id: node.getId(),\r\n                isLeaf: true // for custom template method\r\n            };\r\n        } else {\r\n            state = node.getState();\r\n            props = {\r\n                id: node.getId(),\r\n                stateClass: classNames[state + 'Class'],\r\n                stateLabel: this.stateLabels[state],\r\n                children: this._makeHtml(node.getChildIds())\r\n            };\r\n        }\r\n\r\n        return extend(props, classNames, node.getAllData());\r\n    },\r\n\r\n    /**\r\n     * Draw element of node\r\n     * @param {string} nodeId - Node id\r\n     * @private\r\n     */\r\n    _draw: function(nodeId) {\r\n        var node = this.model.getNode(nodeId),\r\n            element, html;\r\n\r\n        if (!node) {\r\n            return;\r\n        }\r\n\r\n        /**\r\n         * @api\r\n         * @event Tree#beforeDraw\r\n         * @param {string} nodeId - Node id\r\n         * @example\r\n         * tree.on('beforeDraw', function(nodeId) {\r\n         *     if (tree.isMovingNode) {\r\n         *         console.log('isMovingNode');\r\n         *     }\r\n         *     console.log('beforeDraw: ' + nodeId);\r\n         * });\r\n         */\r\n        this.fire('beforeDraw', nodeId);\r\n\r\n        if (node.isRoot()) {\r\n            html = this._makeHtml(node.getChildIds());\r\n            element = this.rootElement;\r\n        } else {\r\n            html = this._makeInnerHTML(node);\r\n            element = document.getElementById(nodeId);\r\n        }\r\n        element.innerHTML = html;\r\n        this._setClassWithDisplay(node);\r\n\r\n        /**\r\n         * @api\r\n         * @event Tree#afterDraw\r\n         * @param {string} nodeId - Node id\r\n         * @example\r\n         * tree.on('afterDraw', function(nodeId) {\r\n         *     if (tree.isMovingNode) {\r\n         *         console.log('isMovingNode');\r\n         *     }\r\n         *     console.log('afterDraw: ' + nodeId);\r\n         * });\r\n         */\r\n        this.fire('afterDraw', nodeId);\r\n    },\r\n\r\n    /**\r\n     * Set class and display of node element\r\n     * @param {TreeNode} node - Node\r\n     * @private\r\n     */\r\n    _setClassWithDisplay: function(node) {\r\n        var nodeId = node.getId(),\r\n            element = document.getElementById(nodeId),\r\n            classNames = this.classNames;\r\n\r\n        if (node.isLeaf()) {\r\n            util.removeClass(element, classNames.openedClass);\r\n            util.removeClass(element, classNames.closedClass);\r\n            util.addClass(element, classNames.leafClass);\r\n        } else {\r\n            this._setDisplayFromNodeState(nodeId, node.getState());\r\n            this.each(function(child) {\r\n                this._setClassWithDisplay(child);\r\n            }, nodeId, this);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Get subtree element\r\n     * @param {string} nodeId - TreeNode id\r\n     * @returns {HTMLElement} Subtree element\r\n     * @private\r\n     */\r\n    _getSubtreeElement: function(nodeId) {\r\n        var node = this.model.getNode(nodeId),\r\n            subtreeElement;\r\n\r\n        if (!node || node.isLeaf()) {\r\n            subtreeElement = null;\r\n        } else if (node.isRoot()) {\r\n            subtreeElement = this.rootElement\r\n        } else {\r\n            subtreeElement = util.getElementsByClassName(\r\n                document.getElementById(nodeId),\r\n                this.classNames.subtreeClass\r\n            )[0];\r\n        }\r\n\r\n        return subtreeElement;\r\n    },\r\n\r\n    /**\r\n     * Return the depth of node\r\n     * @api\r\n     * @param {string} nodeId - Node id\r\n     * @return {number|undefined} Depth\r\n     */\r\n    getDepth: function(nodeId) {\r\n        return this.model.getDepth(nodeId);\r\n    },\r\n\r\n    /**\r\n     * Return the last depth of tree\r\n     * @api\r\n     * @return {number} Last depth\r\n     */\r\n    getLastDepth: function() {\r\n        return this.model.getLastDepth();\r\n    },\r\n\r\n    /**\r\n     * Return root node id\r\n     * @api\r\n     * @returns {string} Root node id\r\n     */\r\n    getRootNodeId: function() {\r\n        return this.model.rootNode.getId();\r\n    },\r\n\r\n    /**\r\n     * Return child ids\r\n     * @api\r\n     * @param {string} nodeId - Node id\r\n     * @returns {Array.&lt;string>|undefined} Child ids\r\n     */\r\n    getChildIds: function(nodeId) {\r\n        return this.model.getChildIds(nodeId);\r\n    },\r\n\r\n    /**\r\n     * Return parent id of node\r\n     * @api\r\n     * @param {string} nodeId - Node id\r\n     * @returns {string|undefined} Parent id\r\n     */\r\n    getParentId: function(nodeId) {\r\n        return this.model.getParentId(nodeId);\r\n    },\r\n\r\n    /**\r\n     * Reset click timer\r\n     */\r\n    resetClickTimer: function() {\r\n        window.clearTimeout(this.clickTimer);\r\n        this.clickTimer = null;\r\n    },\r\n\r\n    /**\r\n     * Get node id from element\r\n     * @api\r\n     * @param {HTMLElement} element - Element\r\n     * @returns {string} Node id\r\n     * @example\r\n     * tree.getNodeIdFromElement(elementInNode); // 'tui-tree-node-3'\r\n     */\r\n    getNodeIdFromElement: function(element) {\r\n        var idPrefix = this.getNodeIdPrefix();\r\n\r\n        while (element &amp;&amp; element.id.indexOf(idPrefix) === -1) {\r\n            element = element.parentElement;\r\n        }\r\n\r\n        return element ? element.id : '';\r\n    },\r\n\r\n    /**\r\n     * Get prefix of node id\r\n     * @api\r\n     * @returns {string} Prefix of node id\r\n     * @example\r\n     * tree.getNodeIdPrefix(); // 'tui-tree-node-'\r\n     */\r\n    getNodeIdPrefix: function() {\r\n        return this.model.getNodeIdPrefix();\r\n    },\r\n\r\n    /**\r\n     * Get node data\r\n     * @api\r\n     * @param {string} nodeId - Node id\r\n     * @returns {object|undefined} Node data\r\n     */\r\n    getNodeData: function(nodeId) {\r\n        return this.model.getNodeData(nodeId);\r\n    },\r\n\r\n    /**\r\n     * Set data properties of a node\r\n     * @api\r\n     * @param {string} nodeId - Node id\r\n     * @param {object} data - Properties\r\n     * @param {boolean} [isSilent] - If true, it doesn't trigger the 'update' event\r\n     * @exmaple\r\n     * tree.setNodeData(nodeId, {foo: 'bar'}); // auto refresh\r\n     * tree.setNodeData(nodeId, {foo: 'bar'}, true); // not refresh\r\n     */\r\n    setNodeData: function(nodeId, data, isSilent) {\r\n        this.model.setNodeData(nodeId, data, isSilent);\r\n    },\r\n\r\n    /**\r\n     * Remove node data\r\n     * @api\r\n     * @param {string} nodeId - Node id\r\n     * @param {string|Array} names - Names of properties\r\n     * @param {boolean} [isSilent] - If true, it doesn't trigger the 'update' event\r\n     * @example\r\n     * tree.setNodeData(nodeId, 'foo'); // auto refresh\r\n     * tree.setNodeData(nodeId, 'foo', true); // not refresh\r\n     */\r\n    removeNodeData: function(nodeId, names, isSilent) {\r\n        this.model.removeNodeData(nodeId, names, isSilent)\r\n    },\r\n\r\n    /**\r\n     * Get node state.\r\n     * @param {string} nodeId - Node id\r\n     * @return {string|undefined} Node state(('opened', 'closed', undefined)\r\n     * @example\r\n     * tree.getState(nodeId); // 'opened', 'closed',\r\n     *                        // undefined if the node is nonexistent\r\n     */\r\n    getState: function(nodeId) {\r\n        var node = this.model.getNode(nodeId);\r\n\r\n        if (!node) {\r\n            return;\r\n        }\r\n        return node.getState();\r\n    },\r\n\r\n    /**\r\n     * Open node\r\n     * @api\r\n     * @param {string} nodeId - Node id\r\n     */\r\n    open: function(nodeId) {\r\n        var node = this.model.getNode(nodeId),\r\n            state = nodeStates.OPENED;\r\n\r\n        if (node &amp;&amp; !node.isRoot()) {\r\n            node.setState(state);\r\n            this._setDisplayFromNodeState(nodeId, state);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Close node\r\n     * @api\r\n     * @param {string} nodeId - Node id\r\n     */\r\n    close: function(nodeId) {\r\n        var node = this.model.getNode(nodeId),\r\n            state = nodeStates.CLOSED;\r\n\r\n        if (node &amp;&amp; !node.isRoot()) {\r\n            node.setState(state);\r\n            this._setDisplayFromNodeState(nodeId, state);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Toggle node\r\n     * @api\r\n     * @param {string} nodeId - Node id\r\n     */\r\n    toggle: function(nodeId) {\r\n        var node = this.model.getNode(nodeId),\r\n            state;\r\n\r\n        if (node &amp;&amp; !node.isRoot()) {\r\n            node.toggleState();\r\n            state = node.getState();\r\n            this._setDisplayFromNodeState(nodeId, state);\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Sort all nodes\r\n     * @api\r\n     * @param {Function} comparator - Comparator for sorting\r\n     * @param {boolean} [isSilent] - If true, it doesn't redraw tree\r\n     * @example\r\n     * // Sort with redrawing tree\r\n     * tree.sort(function(nodeA, nodeB) {\r\n     *     var aValue = nodeA.getData('text'),\r\n     *         bValue = nodeB.getData('text');\r\n     *\r\n     *     if (!bValue || !bValue.localeCompare) {\r\n     *         return 0;\r\n     *     }\r\n     *     return bValue.localeCompare(aValue);\r\n     * });\r\n     *\r\n     * // Sort, but not redraw tree\r\n     * tree.sort(function(nodeA, nodeB) {\r\n     *     var aValue = nodeA.getData('text'),\r\n     *         bValue = nodeB.getData('text');\r\n     *\r\n     *     if (!bValue || !bValue.localeCompare) {\r\n     *         return 0;\r\n     *     }\r\n     *     return bValue.localeCompare(aValue);\r\n     * }, true);\r\n     */\r\n    sort: function(comparator, isSilent) {\r\n        this.model.sort(comparator);\r\n        if (!isSilent) {\r\n            this.refresh();\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Refresh tree or node's children\r\n     * @api\r\n     * @param {string} [nodeId] - TreeNode id to refresh\r\n     */\r\n    refresh: function(nodeId) {\r\n        nodeId = nodeId || this.getRootNodeId();\r\n        this._draw(nodeId);\r\n    },\r\n\r\n    /**\r\n     * Traverse this tree iterating over all nodes.\r\n     * @api\r\n     * @param {Function} iteratee - Iteratee function\r\n     * @param {object} [context] - Context of iteratee\r\n     * @example\r\n     * tree.eachAll(function(node, nodeId) {\r\n     *     console.log(node.getId() === nodeId); // true\r\n     * });\r\n     */\r\n    eachAll: function(iteratee, context) {\r\n        this.model.eachAll(iteratee, context);\r\n    },\r\n\r\n    /**\r\n     * Traverse this tree iterating over all descendants of a node.\r\n     * @api\r\n     * @param {Function} iteratee - Iteratee function\r\n     * @param {string} parentId - Parent node id\r\n     * @param {object} [context] - Context of iteratee\r\n     * @example\r\n     * tree.each(function(node, nodeId) {\r\n     *     console.log(node.getId() === nodeId); // true\r\n     * }, parentId);\r\n     *\r\n     */\r\n    each: function(iteratee, parentId, context) {\r\n        this.model.each(iteratee, parentId, context);\r\n    },\r\n\r\n    /**\r\n     * Add node(s).\r\n     * - If the parentId is falsy, the node will be appended to rootNode.\r\n     * - If 'isSilent' is not true, it redraws the tree\r\n     * @api\r\n     * @param {Array|object} data - Raw-data\r\n     * @param {*} parentId - Parent id\r\n     * @param {boolean} [isSilent] - If true, it doesn't redraw children\r\n     * @returns {Array.&lt;string>} Added node ids\r\n     * @example\r\n     * // add node with redrawing\r\n     * var firstAddedIds = tree.add({text:'FE development team1'}, parentId);\r\n     * console.log(firstAddedIds); // [\"tui-tree-node-10\"]\r\n     *\r\n     * // add node without redrawing\r\n     * var secondAddedIds = tree.add([\r\n     *    {text: 'FE development team2'},\r\n     *    {text: 'FE development team3'}\r\n     * ], parentId, true);\r\n     * console.log(secondAddedIds); // [\"tui-tree-node-11\", \"tui-tree-node-12\"]\r\n     */\r\n    add: function(data, parentId, isSilent) {\r\n        return this.model.add(data, parentId, isSilent);\r\n    },\r\n\r\n    /**\r\n     * Remove a node with children.\r\n     * - If 'isSilent' is not true, it redraws the tree\r\n     * @api\r\n     * @param {string} nodeId - Node id to remove\r\n     * @param {boolean} [isSilent] - If true, it doesn't redraw children\r\n     * @example\r\n     * tree.remove(myNodeId); // remove node with redrawing\r\n     * tree.remove(myNodeId, true); // remove node without redrawing\r\n     */\r\n    remove: function(nodeId, isSilent) {\r\n        this.model.remove(nodeId, isSilent);\r\n    },\r\n\r\n    /**\r\n     * Move a node to new parent\r\n     * - If 'isSilent' is not true, it redraws the tree\r\n     * @api\r\n     * @param {string} nodeId - Node id\r\n     * @param {string} newParentId - New parent id\r\n     * @param {boolean} [isSilent] - If true, it doesn't redraw children\r\n     * @example\r\n     * tree.move(myNodeId, newParentId); // mode node with redrawing\r\n     * tree.move(myNodeId, newParentId, true); // move node without redrawing\r\n     */\r\n    move: function(nodeId, newParentId, isSilent) {\r\n        this.isMovingNode = true;\r\n        this.model.move(nodeId, newParentId, isSilent);\r\n        this.isMovingNode = false;\r\n    },\r\n\r\n    /**\r\n     * Search node ids by passing the predicate check or matching data\r\n     * @api\r\n     * @param {Function|Object} predicate - Predicate or data\r\n     * @param {Object} [context] - Context of predicate\r\n     * @returns {Array.&lt;string>} Node ids\r\n     * @example\r\n     * // search from predicate\r\n     * var leafNodeIds = tree.search(function(node, nodeId) {\r\n     *     return node.isLeaf();\r\n     * });\r\n     * console.log(leafNodeIds); // ['tui-tree-node-3', 'tui-tree-node-5']\r\n     *\r\n     * // search from data\r\n     * var specialNodeIds = tree.search({\r\n     *     isSpecial: true,\r\n     *     foo: 'bar'\r\n     * });\r\n     * console.log(specialNodeIds); // ['tui-tree-node-5', 'tui-tree-node-10']\r\n     * console.log(tree.getNodeData('tui-tree-node-5').isSpecial); // true\r\n     * console.log(tree.getNodeData('tui-tree-node-5').foo); // 'bar'\r\n     */\r\n    search: function(predicate, context) {\r\n        if (!snippet.isObject(predicate)) {\r\n            return [];\r\n        }\r\n\r\n        if (snippet.isFunction(predicate)) {\r\n            return this._filter(predicate, context);\r\n        }\r\n\r\n        return this._where(predicate);\r\n    },\r\n\r\n    /**\r\n     * Search node ids by matching data\r\n     * @param {Object} props - Data\r\n     * @returns {Array.&lt;string>} Node ids\r\n     * @private\r\n     */\r\n    _where: function(props) {\r\n        return this._filter(function(node) {\r\n            var result = true,\r\n                data = node.getAllData();\r\n\r\n            snippet.forEach(props, function(value, key) {\r\n                result = (key in data) &amp;&amp; (data[key] === value);\r\n                return result;\r\n            });\r\n\r\n            return result;\r\n        });\r\n    },\r\n\r\n    /**\r\n     * Search node ids by passing the predicate check\r\n     * @param {Function} predicate - Predicate\r\n     * @param {Object} [context] - Context of predicate\r\n     * @returns {Array.&lt;string>} Node ids\r\n     * @private\r\n     */\r\n    _filter: function(predicate, context) {\r\n        var filtered = [];\r\n\r\n        this.eachAll(function(node, nodeId) {\r\n            if (predicate(node, nodeId)) {\r\n                filtered.push(nodeId);\r\n            }\r\n        }, context);\r\n\r\n        return filtered;\r\n    },\r\n\r\n    /**\r\n     * Whether the node is leaf\r\n     * @api\r\n     * @param {string} nodeId - Node id\r\n     * @returns {boolean} True if the node is leaf.\r\n     */\r\n    isLeaf: function(nodeId) {\r\n        var node = this.model.getNode(nodeId);\r\n\r\n        return node &amp;&amp; node.isLeaf();\r\n    },\r\n\r\n    /**\r\n     * Whether a node is a ancestor of another node.\r\n     * @api\r\n     * @param {string} containerNodeId - Id of a node that may contain the other node\r\n     * @param {string} containedNodeId - Id of a node that may be contained by the other node\r\n     * @returns {boolean} Whether a node contains another node\r\n     */\r\n    contains: function(containerNodeId, containedNodeId) {\r\n        return this.model.contains(containedNodeId, containedNodeId);\r\n    },\r\n\r\n    /**\r\n     * Enable facility of tree\r\n     * @api\r\n     * @param {string} featureName - 'Selectable', 'Draggable', 'Editable'\r\n     * @param {object} [options] - Feature options\r\n     * @returns {Tree} this\r\n     * @example\r\n     * tree\r\n     *  .enableFeature('Selectable', {\r\n     *      selectedClassName: 'tui-tree-selected'\r\n     *  })\r\n     *  .enableFeature('Editable', {\r\n     *      enableClassName: tree.classNames.textClass,\r\n     *      dataKey: 'text',\r\n     *      inputClassName: 'myInput'\r\n     *  })\r\n     *  .enableFeature('Draggable', {\r\n     *      useHelper: true,\r\n     *      helperPos: {x: 5, y: 2},\r\n     *      rejectedTagNames: ['UL', 'INPUT', 'BUTTON'],\r\n     *      rejectedClassNames: ['notDraggable', 'notDraggable-2']\r\n     *  })\r\n     *  .enableFeature('Checkbox', {\r\n     *      checkboxClassName: 'tui-tree-checkbox'\r\n     *  });\r\n     */\r\n    enableFeature: function(featureName, options) {\r\n        var Feature = features[featureName];\r\n\r\n        this.disableFeature(featureName);\r\n        if (Feature) {\r\n            this.enabledFeatures[featureName] = new Feature(this, options);\r\n        }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Disable facility of tree\r\n     * @api\r\n     * @param {string} featureName - 'Selectable', 'Draggable', 'Editable'\r\n     * @returns {Tree} this\r\n     * @example\r\n     * tree\r\n     *  .disableFeature('Selectable')\r\n     *  .disableFeature('Draggable')\r\n     *  .disableFeature('Editable')\r\n     *  .disableFeature('Checkbox');\r\n     */\r\n    disableFeature: function(featureName) {\r\n        var feature = this.enabledFeatures[featureName];\r\n\r\n        if (feature) {\r\n            feature.destroy();\r\n            delete this.enabledFeatures[featureName]\r\n        }\r\n        return this;\r\n    }\r\n});\r\n\r\n/**\r\n * Set abstract apis to tree prototype\r\n * @param {string} featureName - Feature name\r\n * @param {object} feature - Feature\r\n */\r\nfunction setAbstractAPIs(featureName, feature) {\r\n    var messageName = 'INVALID_API_' + featureName.toUpperCase(),\r\n        apiList = feature.getAPIList ? feature.getAPIList() : [];\r\n\r\n    snippet.forEach(apiList, function(api) {\r\n        Tree.prototype[api] = function() {\r\n            throw new Error(messages[messageName] || messages.INVALID_API);\r\n        }\r\n    });\r\n}\r\nsnippet.forEach(features, function(Feature, name) {\r\n    setAbstractAPIs(name, Feature);\r\n});\r\nsnippet.CustomEvents.mixin(Tree);\r\nmodule.exports = Tree;\r\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"